{
    "project": {
        "name": "PreloadJS",
        "version": "1.0.0",
        "description": "PreloadJS Docs",
        "url": "http://www.createjs.com/preloadjs",
        "logo": "assets/docs-icon-PreloadJS.png"
    },
    "files": {
        "createjs/events/ErrorEvent.js": {
            "name": "createjs/events/ErrorEvent.js",
            "modules": {},
            "classes": {
                "ErrorEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "createjs/events/Event.js": {
            "name": "createjs/events/Event.js",
            "modules": {
                "CreateJS": 1
            },
            "classes": {
                "Event": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "createjs/events/EventDispatcher.js": {
            "name": "createjs/events/EventDispatcher.js",
            "modules": {},
            "classes": {
                "EventDispatcher": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/deprecate.js": {
            "name": "createjs/utils/deprecate.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/extend.js": {
            "name": "createjs/utils/extend.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/indexOf.js": {
            "name": "createjs/utils/indexOf.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/promote.js": {
            "name": "createjs/utils/promote.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "createjs/utils/proxy.js": {
            "name": "createjs/utils/proxy.js",
            "modules": {},
            "classes": {
                "Utility Methods": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/data/LoadItem.js": {
            "name": "preloadjs/data/LoadItem.js",
            "modules": {},
            "classes": {
                "LoadItem": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/data/Methods.js": {
            "name": "preloadjs/data/Methods.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/data/Types.js": {
            "name": "preloadjs/data/Types.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/events/ProgressEvent.js": {
            "name": "preloadjs/events/ProgressEvent.js",
            "modules": {},
            "classes": {
                "ProgressEvent": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/AbstractLoader.js": {
            "name": "preloadjs/loaders/AbstractLoader.js",
            "modules": {},
            "classes": {
                "AbstractLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/AbstractMediaLoader.js": {
            "name": "preloadjs/loaders/AbstractMediaLoader.js",
            "modules": {},
            "classes": {
                "AbstractMediaLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/BinaryLoader.js": {
            "name": "preloadjs/loaders/BinaryLoader.js",
            "modules": {},
            "classes": {
                "BinaryLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/CSSLoader.js": {
            "name": "preloadjs/loaders/CSSLoader.js",
            "modules": {},
            "classes": {
                "CSSLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/FontLoader.js": {
            "name": "preloadjs/loaders/FontLoader.js",
            "modules": {},
            "classes": {
                "FontLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/ImageLoader.js": {
            "name": "preloadjs/loaders/ImageLoader.js",
            "modules": {},
            "classes": {
                "ImageLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/JSONLoader.js": {
            "name": "preloadjs/loaders/JSONLoader.js",
            "modules": {},
            "classes": {
                "JSONLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/JSONPLoader.js": {
            "name": "preloadjs/loaders/JSONPLoader.js",
            "modules": {},
            "classes": {
                "JSONPLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/JavaScriptLoader.js": {
            "name": "preloadjs/loaders/JavaScriptLoader.js",
            "modules": {},
            "classes": {
                "JavaScriptLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/ManifestLoader.js": {
            "name": "preloadjs/loaders/ManifestLoader.js",
            "modules": {},
            "classes": {
                "ManifestLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/SVGLoader.js": {
            "name": "preloadjs/loaders/SVGLoader.js",
            "modules": {},
            "classes": {
                "SVGLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/SoundLoader.js": {
            "name": "preloadjs/loaders/SoundLoader.js",
            "modules": {},
            "classes": {
                "SoundLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/SpriteSheetLoader.js": {
            "name": "preloadjs/loaders/SpriteSheetLoader.js",
            "modules": {},
            "classes": {
                "SpriteSheetLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/TextLoader.js": {
            "name": "preloadjs/loaders/TextLoader.js",
            "modules": {},
            "classes": {
                "TextLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/VideoLoader.js": {
            "name": "preloadjs/loaders/VideoLoader.js",
            "modules": {},
            "classes": {
                "VideoLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/loaders/XMLLoader.js": {
            "name": "preloadjs/loaders/XMLLoader.js",
            "modules": {},
            "classes": {
                "XMLLoader": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/net/AbstractRequest.js": {
            "name": "preloadjs/net/AbstractRequest.js",
            "modules": {},
            "classes": {
                "AbstractRequest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/net/MediaTagRequest.js": {
            "name": "preloadjs/net/MediaTagRequest.js",
            "modules": {},
            "classes": {
                "MediaTagRequest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/net/TagRequest.js": {
            "name": "preloadjs/net/TagRequest.js",
            "modules": {},
            "classes": {
                "TagRequest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/net/XHRRequest.js": {
            "name": "preloadjs/net/XHRRequest.js",
            "modules": {},
            "classes": {
                "XHRRequest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/plugins/SamplePlugin.js": {
            "name": "preloadjs/plugins/SamplePlugin.js",
            "modules": {},
            "classes": {
                "SamplePlugin": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/utils/DataUtils.js": {
            "name": "preloadjs/utils/DataUtils.js",
            "modules": {},
            "classes": {
                "DataUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/utils/DomUtils.js": {
            "name": "preloadjs/utils/DomUtils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/utils/Elements.js": {
            "name": "preloadjs/utils/Elements.js",
            "modules": {},
            "classes": {
                "DomUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/utils/RequestUtils.js": {
            "name": "preloadjs/utils/RequestUtils.js",
            "modules": {},
            "classes": {
                "RequestUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/utils/URLUtils.js": {
            "name": "preloadjs/utils/URLUtils.js",
            "modules": {},
            "classes": {
                "URLUtils": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/LoadQueue.js": {
            "name": "preloadjs/LoadQueue.js",
            "modules": {
                "PreloadJS": 1
            },
            "classes": {
                "LoadQueue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "preloadjs/version.js": {
            "name": "preloadjs/version.js",
            "modules": {},
            "classes": {
                "PreloadJS": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "CreateJS": {
            "name": "CreateJS",
            "submodules": {},
            "classes": {
                "ErrorEvent": 1,
                "Event": 1,
                "EventDispatcher": 1,
                "Utility Methods": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "createjs/utils/proxy.js",
            "line": 36,
            "description": "A collection of Classes that are shared across all the CreateJS libraries.  The classes are included in the minified\nfiles of each library and are available on the createjs namespace directly.\n\n<h4>Example</h4>\n\n     myObject.addEventListener(\"change\", createjs.proxy(myMethod, scope));",
            "itemtype": "main"
        },
        "PreloadJS": {
            "name": "PreloadJS",
            "submodules": {},
            "classes": {
                "LoadItem": 1,
                "ProgressEvent": 1,
                "AbstractLoader": 1,
                "AbstractMediaLoader": 1,
                "BinaryLoader": 1,
                "CSSLoader": 1,
                "FontLoader": 1,
                "ImageLoader": 1,
                "JSONLoader": 1,
                "JSONPLoader": 1,
                "JavaScriptLoader": 1,
                "ManifestLoader": 1,
                "SVGLoader": 1,
                "SoundLoader": 1,
                "SpriteSheetLoader": 1,
                "TextLoader": 1,
                "VideoLoader": 1,
                "XMLLoader": 1,
                "AbstractRequest": 1,
                "MediaTagRequest": 1,
                "TagRequest": 1,
                "XHRRequest": 1,
                "SamplePlugin": 1,
                "DataUtils": 1,
                "DomUtils": 1,
                "RequestUtils": 1,
                "URLUtils": 1,
                "LoadQueue": 1,
                "PreloadJS": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "main",
            "file": "preloadjs/version.js",
            "line": 6,
            "description": "PreloadJS provides a consistent way to preload content for use in HTML applications. Preloading can be done using\nHTML tags, as well as XHR.\n\nBy default, PreloadJS will try and load content using XHR, since it provides better support for progress and\ncompletion events, <b>however due to cross-domain issues, it may still be preferable to use tag-based loading\ninstead</b>. Note that some content requires XHR to work (plain text, web audio), and some requires tags (HTML audio).\nNote this is handled automatically where possible.\n\nPreloadJS currently supports all modern browsers, and we have done our best to include support for most older\nbrowsers. If you find an issue with any specific OS/browser combination, please visit http://community.createjs.com/\nand report it.\n\n<h4>Getting Started</h4>\nTo get started, check out the {{#crossLink \"LoadQueue\"}}{{/crossLink}} class, which includes a quick overview of how\nto load files and process results.\n\n<h4>Example</h4>\n\n     var queue = new createjs.LoadQueue();\n     queue.installPlugin(createjs.Sound);\n     queue.on(\"complete\", handleComplete, this);\n     queue.loadFile({id:\"sound\", src:\"http://path/to/sound.mp3\"});\n     queue.loadManifest([\n         {id: \"myImage\", src:\"path/to/myImage.jpg\"}\n     ]);\n     function handleComplete() {\n         createjs.Sound.play(\"sound\");\n         var image = queue.getResult(\"myImage\");\n         document.body.appendChild(image);\n     }\n\n<b>Important note on plugins:</b> Plugins must be installed <i>before</i> items are added to the queue, otherwise\nthey will not be processed, even if the load has not actually kicked off yet. Plugin functionality is handled when\nthe items are added to the LoadQueue.\n\n<h4>Browser Support</h4>\nPreloadJS is partially supported in all browsers, and fully supported in all modern browsers. Known exceptions:\n<ul><li>XHR loading of any content will not work in many older browsers (See a matrix here: <a href=\"http://caniuse.com/xhr2\" target=\"_blank\">http://caniuse.com/xhr2</a>).\n     In many cases, you can fall back on tag loading (images, audio, CSS, scripts, and SVG). Text and\n     WebAudio will only work with XHR.</li>\n     <li>Some formats have poor support for complete events in IE 6, 7, and 8 (SVG, tag loading of scripts, XML/JSON)</li>\n     <li>Opera has poor support for SVG loading with XHR</li>\n     <li>CSS loading in Android and Safari will not work with tags (currently, a workaround is in progress)</li>\n     <li>Local loading is not permitted with XHR, which is required by some file formats. When testing local content\n     use either a local server, or enable tag loading, which is supported for most formats. See {{#crossLink \"LoadQueue/setPreferXHR\"}}{{/crossLink}}\n     for more information.</li>\n</ul>\n\n<h4>Cross-domain Loading</h4>\nMost content types can be loaded cross-domain, as long as the server supports CORS. PreloadJS also has internal\nsupport for images served from a CORS-enabled server, via the `crossOrigin` argument on the {{#crossLink \"LoadQueue\"}}{{/crossLink}}\nconstructor. If set to a string value (such as \"Anonymous\"), the \"crossOrigin\" property of images generated by\nPreloadJS is set to that value. Please note that setting a `crossOrigin` value on an image that is served from a\nserver without CORS will cause other errors. For more info on CORS, visit https://en.wikipedia.org/wiki/Cross-origin_resource_sharing.",
            "itemtype": "main"
        }
    },
    "classes": {
        "ErrorEvent": {
            "name": "ErrorEvent",
            "shortname": "ErrorEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/events/ErrorEvent.js",
            "line": 39,
            "description": "A general error {{#crossLink \"Event\"}}{{/crossLink}}, that describes an error that occurred, as well as any details.",
            "params": [
                {
                    "name": "title",
                    "description": "The error title",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "message",
                    "description": "The error description",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "data",
                    "description": "Additional error data",
                    "type": "Object",
                    "optional": true
                }
            ],
            "is_constructor": 1
        },
        "Event": {
            "name": "Event",
            "shortname": "Event",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/events/Event.js",
            "line": 48,
            "description": "Contains properties and methods shared by all events for use with\n{{#crossLink \"EventDispatcher\"}}{{/crossLink}}.\n\nNote that Event objects are often reused, so you should never\nrely on an event object's state outside of the call stack it was received in.",
            "params": [
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "bubbles",
                    "description": "Indicates whether the event will bubble through the display list.",
                    "type": "Boolean"
                },
                {
                    "name": "cancelable",
                    "description": "Indicates whether the default behaviour of this event can be cancelled.",
                    "type": "Boolean"
                }
            ],
            "is_constructor": 1
        },
        "EventDispatcher": {
            "name": "EventDispatcher",
            "shortname": "EventDispatcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/events/EventDispatcher.js",
            "line": 41,
            "description": "EventDispatcher provides methods for managing queues of event listeners and dispatching events.\n\nYou can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the\nEventDispatcher {{#crossLink \"EventDispatcher/initialize\"}}{{/crossLink}} method.\n\nTogether with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the\nDOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports\nbubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.\n\nEventDispatcher also exposes a {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} method, which makes it easier\nto create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The \n{{#crossLink \"EventDispatcher/off\"}}{{/crossLink}} method is merely an alias to\n{{#crossLink \"EventDispatcher/removeEventListener\"}}{{/crossLink}}.\n\nAnother addition to the DOM Level 2 model is the {{#crossLink \"EventDispatcher/removeAllEventListeners\"}}{{/crossLink}}\nmethod, which can be used to listeners for all events, or listeners for a specific event. The Event object also \nincludes a {{#crossLink \"Event/remove\"}}{{/crossLink}} method which removes the active listener.\n\n<h4>Example</h4>\nAdd EventDispatcher capabilities to the \"MyClass\" class.\n\n     EventDispatcher.initialize(MyClass.prototype);\n\nAdd an event (see {{#crossLink \"EventDispatcher/addEventListener\"}}{{/crossLink}}).\n\n     instance.addEventListener(\"eventName\", handlerMethod);\n     function handlerMethod(event) {\n         console.log(event.target + \" Was Clicked\");\n     }\n\n<b>Maintaining proper scope</b><br />\nScope (ie. \"this\") can be be a challenge with events. Using the {{#crossLink \"EventDispatcher/on\"}}{{/crossLink}}\nmethod to subscribe to events simplifies this.\n\n     instance.addEventListener(\"click\", function(event) {\n         console.log(instance == this); // false, scope is ambiguous.\n     });\n     \n     instance.on(\"click\", function(event) {\n         console.log(instance == this); // true, \"on\" uses dispatcher scope by default.\n     });\n\nIf you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage\nscope.\n\n<b>Browser support</b>\nThe event model in CreateJS can be used separately from the suite in any project, however the inheritance model\nrequires modern browsers (IE9+).",
            "is_constructor": 1
        },
        "Utility Methods": {
            "name": "Utility Methods",
            "shortname": "Utility Methods",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "CreateJS",
            "namespace": "",
            "file": "createjs/utils/proxy.js",
            "line": 36,
            "description": "Various utilities that the CreateJS Suite uses. Utilities are created as separate files, and will be available on the\ncreatejs namespace directly.\n\n<h4>Example</h4>\n\n     myObject.addEventListener(\"change\", createjs.proxy(myMethod, scope));",
            "mainName": "Utility Methods",
            "tag": "main",
            "itemtype": "main",
            "_main": true
        },
        "LoadItem": {
            "name": "LoadItem",
            "shortname": "LoadItem",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/data/LoadItem.js",
            "line": 40,
            "description": "All loaders accept an item containing the properties defined in this class. If a raw object is passed instead,\nit will not be affected, but it must contain at least a {{#crossLink \"src:property\"}}{{/crossLink}} property. A\nstring path or HTML tag is also acceptable, but it will be automatically converted to a LoadItem using the\n{{#crossLink \"create\"}}{{/crossLink}} method by {{#crossLink \"AbstractLoader\"}}{{/crossLink}}",
            "is_constructor": 1,
            "since": "0.6.0"
        },
        "ProgressEvent": {
            "name": "ProgressEvent",
            "shortname": "ProgressEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/events/ProgressEvent.js",
            "line": 41,
            "description": "A CreateJS {{#crossLink \"Event\"}}{{/crossLink}} that is dispatched when progress changes.",
            "params": [
                {
                    "name": "loaded",
                    "description": "The amount that has been loaded. This can be any number relative to the total.",
                    "type": "Number"
                },
                {
                    "name": "total",
                    "description": "The total amount that will load. This will default to 1, so if the `loaded` value is\na percentage (between 0 and 1), it can be omitted.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "todo": [
                "Consider having this event be a \"fileprogress\" event as well"
            ],
            "is_constructor": 1
        },
        "AbstractLoader": {
            "name": "AbstractLoader",
            "shortname": "AbstractLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 41,
            "description": "The base loader, which defines all the generic methods, properties, and events. All loaders extend this class,\nincluding the {{#crossLink \"LoadQueue\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "The item to be loaded.",
                    "type": "LoadItem|object|string"
                },
                {
                    "name": "preferXHR",
                    "description": "Determines if the LoadItem should <em>try</em> and load using XHR, or take a\ntag-based approach, which can be better in cross-domain situations. Not all loaders can load using one or the\nother, so this is a suggested directive.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "type",
                    "description": "The type of loader. Loader types are defined as constants on the AbstractLoader class,\nsuch as {{#crossLink \"IMAGE:property\"}}{{/crossLink}}, {{#crossLink \"CSS:property\"}}{{/crossLink}}, etc.",
                    "type": "String",
                    "optional": true
                }
            ],
            "extends": "EventDispatcher"
        },
        "AbstractMediaLoader": {
            "name": "AbstractMediaLoader",
            "shortname": "AbstractMediaLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/AbstractMediaLoader.js",
            "line": 41,
            "description": "The AbstractMediaLoader is a base class that handles some of the shared methods and properties of loaders that\nhandle HTML media elements, such as Video and Audio.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                },
                {
                    "name": "preferXHR",
                    "description": "",
                    "type": "Boolean"
                },
                {
                    "name": "type",
                    "description": "The type of media to load. Usually \"video\" or \"audio\".",
                    "type": "String"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "BinaryLoader": {
            "name": "BinaryLoader",
            "shortname": "BinaryLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/BinaryLoader.js",
            "line": 41,
            "description": "A loader for binary files. This is useful for loading web audio, or content that requires an ArrayBuffer.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "CSSLoader": {
            "name": "CSSLoader",
            "shortname": "CSSLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/CSSLoader.js",
            "line": 41,
            "description": "A loader for CSS files.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                },
                {
                    "name": "preferXHR",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "FontLoader": {
            "name": "FontLoader",
            "shortname": "FontLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 41,
            "description": "A loader that handles font files, CSS definitions, and CSS paths. FontLoader doesn't actually preload fonts\nthemselves, but rather generates CSS definitions, and then tests the size changes on an HTML5 Canvas element.\n\nNote that FontLoader does not support tag-based loading due to the requirement that CSS be read to determine the\nfont definitions to test for.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "The item to be loaded.",
                    "type": "LoadItem|object|string"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "ImageLoader": {
            "name": "ImageLoader",
            "shortname": "ImageLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/ImageLoader.js",
            "line": 37,
            "description": "A loader for image files.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                },
                {
                    "name": "preferXHR",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "JSONLoader": {
            "name": "JSONLoader",
            "shortname": "JSONLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/JSONLoader.js",
            "line": 41,
            "description": "A loader for JSON files. To load JSON cross-domain, use JSONP and the {{#crossLink \"JSONPLoader\"}}{{/crossLink}}\ninstead. To load JSON-formatted manifests, use {{#crossLink \"ManifestLoader\"}}{{/crossLink}}, and to\nload EaselJS SpriteSheets, use {{#crossLink \"SpriteSheetLoader\"}}{{/crossLink}}.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "JSONPLoader": {
            "name": "JSONPLoader",
            "shortname": "JSONPLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/JSONPLoader.js",
            "line": 41,
            "description": "A loader for JSONP files, which are JSON-formatted text files, wrapped in a callback. To load regular JSON\nwithout a callback use the {{#crossLink \"JSONLoader\"}}{{/crossLink}} instead. To load JSON-formatted manifests,\nuse {{#crossLink \"ManifestLoader\"}}{{/crossLink}}, and to load EaselJS SpriteSheets, use\n{{#crossLink \"SpriteSheetLoader\"}}{{/crossLink}}.\n\nJSONP is a format that provides a solution for loading JSON files cross-domain <em>without</em> requiring CORS.\nJSONP files are loaded as JavaScript, and the \"callback\" is executed once they are loaded. The callback in the\nJSONP must match the callback passed to the loadItem.\n\n<h4>Example JSONP</h4>\n\n\t\tcallbackName({\n\t\t\t\"name\": \"value\",\n\t \t\t\"num\": 3,\n\t\t\t\"obj\": { \"bool\":true }\n\t\t});\n\n<h4>Example</h4>\n\n\t\tvar loadItem = {id:\"json\", type:\"jsonp\", src:\"http://server.com/text.json\", callback:\"callbackName\"}\n\t\tvar queue = new createjs.LoadQueue();\n\t\tqueue.on(\"complete\", handleComplete);\n\t\tqueue.loadItem(loadItem);\n\n\t\tfunction handleComplete(event) }\n\t\t\tvar json = queue.getResult(\"json\");\n\t\t\tconsole.log(json.obj.bool); // true\n\t\t}\n\nJSONP files loaded concurrently require a <em>unique</em> callback. To ensure JSONP files are loaded in order,\neither use the {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}} method (set to 1), or set\n{{#crossLink \"LoadItem/maintainOrder:property\"}}{{/crossLink}} on items with the same callback.\n\nImportant note: Some browsers will prevent JSONP from firing the callback if the file was loaded as JSON, and not\nJavaScript. You may have to have your server give you a JavaScript mime-type for this to work.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "JavaScriptLoader": {
            "name": "JavaScriptLoader",
            "shortname": "JavaScriptLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/JavaScriptLoader.js",
            "line": 41,
            "description": "A loader for JavaScript files.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                },
                {
                    "name": "preferXHR",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "ManifestLoader": {
            "name": "ManifestLoader",
            "shortname": "ManifestLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/ManifestLoader.js",
            "line": 41,
            "description": "A loader for JSON manifests. Items inside the manifest are loaded before the loader completes. To load manifests\nusing JSONP, specify a {{#crossLink \"LoadItem/callback:property\"}}{{/crossLink}} as part of the\n{{#crossLink \"LoadItem\"}}{{/crossLink}}.\n\nThe list of files in the manifest must be defined on the top-level JSON object in a `manifest` property. This\nexample shows a sample manifest definition, as well as how to to include a sub-manifest.\n\n\t\t{\n\t\t\t\"path\": \"assets/\",\n\t \t    \"manifest\": [\n\t\t\t\t\"image.png\",\n\t\t\t\t{\"src\": \"image2.png\", \"id\":\"image2\"},\n\t\t\t\t{\"src\": \"sub-manifest.json\", \"type\":\"manifest\", \"callback\":\"jsonCallback\"}\n\t \t    ]\n\t \t}\n\nWhen a ManifestLoader has completed loading, the parent loader (usually a {{#crossLink \"LoadQueue\"}}{{/crossLink}},\nbut could also be another ManifestLoader) will inherit all the loaded items, so you can access them directly.\n\nNote that the {{#crossLink \"JSONLoader\"}}{{/crossLink}} and {{#crossLink \"JSONPLoader\"}}{{/crossLink}} are\nhigher priority loaders, so manifests <strong>must</strong> set the {{#crossLink \"LoadItem\"}}{{/crossLink}}\n{{#crossLink \"LoadItem/type:property\"}}{{/crossLink}} property to {{#crossLink \"Types/MANIFEST:property\"}}{{/crossLink}}.\n\nAdditionally, some browsers require the server to serve a JavaScript mime-type for JSONP, so it may not work in\nsome conditions.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "SVGLoader": {
            "name": "SVGLoader",
            "shortname": "SVGLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/SVGLoader.js",
            "line": 41,
            "description": "A loader for SVG files.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                },
                {
                    "name": "preferXHR",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "SoundLoader": {
            "name": "SoundLoader",
            "shortname": "SoundLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/SoundLoader.js",
            "line": 41,
            "description": "A loader for HTML audio files. PreloadJS can not load WebAudio files, as a WebAudio context is required, which\nshould be created by either a library playing the sound (such as <a href=\"http://soundjs.com\">SoundJS</a>, or an\nexternal framework that handles audio playback. To load content that can be played by WebAudio, use the\n{{#crossLink \"BinaryLoader\"}}{{/crossLink}}, and handle the audio context decoding manually.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                },
                {
                    "name": "preferXHR",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "extends": "AbstractMediaLoader",
            "is_constructor": 1
        },
        "SpriteSheetLoader": {
            "name": "SpriteSheetLoader",
            "shortname": "SpriteSheetLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/SpriteSheetLoader.js",
            "line": 41,
            "description": "A loader for EaselJS SpriteSheets. Images inside the spritesheet definition are loaded before the loader\ncompletes. To load SpriteSheets using JSONP, specify a {{#crossLink \"LoadItem/callback:property\"}}{{/crossLink}}\nas part of the {{#crossLink \"LoadItem\"}}{{/crossLink}}. Note that the {{#crossLink \"JSONLoader\"}}{{/crossLink}}\nand {{#crossLink \"JSONPLoader\"}}{{/crossLink}} are higher priority loaders, so SpriteSheets <strong>must</strong>\nset the {{#crossLink \"LoadItem\"}}{{/crossLink}} {{#crossLink \"LoadItem/type:property\"}}{{/crossLink}} property\nto {{#crossLink \"Types/SPRITESHEET:property\"}}{{/crossLink}}.\n\nThe {{#crossLink \"LoadItem\"}}{{/crossLink}} {{#crossLink \"LoadItem/crossOrigin:property\"}}{{/crossLink}} as well\nas the {{#crossLink \"LoadQueue's\"}}{{/crossLink}} `basePath` argument and {{#crossLink \"LoadQueue/_preferXHR\"}}{{/crossLink}}\nproperty supplied to the {{#crossLink \"LoadQueue\"}}{{/crossLink}} are passed on to the sub-manifest that loads\nthe SpriteSheet images.\n\nNote that the SpriteSheet JSON does not respect the {{#crossLink \"LoadQueue/_preferXHR:property\"}}{{/crossLink}}\nproperty, which should instead be determined by the presence of a {{#crossLink \"LoadItem/callback:property\"}}{{/crossLink}}\nproperty on the SpriteSheet load item. This is because the JSON loaded will have a different format depending on\nif it is loaded as JSON, so just changing `preferXHR` is not enough to change how it is loaded.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "TextLoader": {
            "name": "TextLoader",
            "shortname": "TextLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/TextLoader.js",
            "line": 41,
            "description": "A loader for Text files.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "VideoLoader": {
            "name": "VideoLoader",
            "shortname": "VideoLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/VideoLoader.js",
            "line": 41,
            "description": "A loader for video files.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                },
                {
                    "name": "preferXHR",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "extends": "AbstractMediaLoader",
            "is_constructor": 1
        },
        "XMLLoader": {
            "name": "XMLLoader",
            "shortname": "XMLLoader",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/loaders/XMLLoader.js",
            "line": 41,
            "description": "A loader for CSS files.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem|Object"
                }
            ],
            "extends": "AbstractLoader",
            "is_constructor": 1
        },
        "AbstractRequest": {
            "name": "AbstractRequest",
            "shortname": "AbstractRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/net/AbstractRequest.js",
            "line": 40,
            "description": "A base class for actual data requests, such as {{#crossLink \"XHRRequest\"}}{{/crossLink}}, {{#crossLink \"TagRequest\"}}{{/crossLink}},\nand {{#crossLink \"MediaRequest\"}}{{/crossLink}}. PreloadJS loaders will typically use a data loader under the\nhood to get data.",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "LoadItem"
                }
            ],
            "is_constructor": 1
        },
        "MediaTagRequest": {
            "name": "MediaTagRequest",
            "shortname": "MediaTagRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/net/MediaTagRequest.js",
            "line": 41,
            "description": "An {{#crossLink \"TagRequest\"}}{{/crossLink}} that loads HTML tags for video and audio.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem"
                },
                {
                    "name": "tag",
                    "description": "",
                    "type": "HTMLAudioElement|HTMLVideoElement"
                },
                {
                    "name": "srcAttribute",
                    "description": "The tag attribute that specifies the source, such as \"src\", \"href\", etc.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        },
        "TagRequest": {
            "name": "TagRequest",
            "shortname": "TagRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/net/TagRequest.js",
            "line": 41,
            "description": "An {{#crossLink \"AbstractRequest\"}}{{/crossLink}} that loads HTML tags, such as images and scripts.",
            "params": [
                {
                    "name": "loadItem",
                    "description": "",
                    "type": "LoadItem"
                },
                {
                    "name": "tag",
                    "description": "",
                    "type": "HTMLElement"
                },
                {
                    "name": "srcAttribute",
                    "description": "The tag attribute that specifies the source, such as \"src\", \"href\", etc.",
                    "type": "String"
                }
            ]
        },
        "XHRRequest": {
            "name": "XHRRequest",
            "shortname": "XHRRequest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/net/XHRRequest.js",
            "line": 41,
            "description": "A preloader that loads items using XHR requests, usually XMLHttpRequest. However XDomainRequests will be used\nfor cross-domain requests if possible, and older versions of IE fall back on to ActiveX objects when necessary.\nXHR requests load the content as text or binary data, provide progress and consistent completion events, and\ncan be canceled during load. Note that XHR is not supported in IE 6 or earlier, and is not recommended for\ncross-domain loading.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "item",
                    "description": "The object that defines the file to load. Please see the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\nfor an overview of supported file properties.",
                    "type": "Object"
                }
            ],
            "extends": "AbstractLoader"
        },
        "SamplePlugin": {
            "name": "SamplePlugin",
            "shortname": "SamplePlugin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/plugins/SamplePlugin.js",
            "line": 8,
            "description": "A PreloadJS plugin provides a way to inject functionality into PreloadJS to load file types that are unsupported,\nor in a way that PreloadJS does not.\n\n<strong>Note that this class is mainly for documentation purposes, and is not a real plugin.</strong>\n\nPlugins are registered based on file extension, or supported preload types, which are defined as constants on\nthe {{#crossLink \"LoadQueue\"}}{{/crossLink}} class. Available load types are:\n<ul>\n    <li>binary ({{#crossLink \"LoadQueue/BINARY:property\"}}{{/crossLink}})</li>\n    <li>css ({{#crossLink \"LoadQueue/CSS:property\"}}{{/crossLink}})</li>\n    <li>image ({{#crossLink \"LoadQueue/IMAGE:property\"}}{{/crossLink}})</li>\n    <li>javascript ({{#crossLink \"LoadQueue/JAVASCRIPT:property\"}}{{/crossLink}})</li>\n    <li>json ({{#crossLink \"LoadQueue/JSON:property\"}}{{/crossLink}})</li>\n    <li>jsonp ({{#crossLink \"LoadQueue/JSONP:property\"}}{{/crossLink}})</li>\n    <li>manifest ({{#crossLink \"LoadQueue/MANIFEST:property\"}}{{/crossLink}})</li>\n    <li>sound ({{#crossLink \"LoadQueue/SOUND:property\"}}{{/crossLink}})</li>\n    <li>spriteSheet ({{#crossLink \"LoadQueue/SPRITESHEET:property\"}}{{/crossLink}})</li>\n    <li>svg ({{#crossLink \"LoadQueue/SVG:property\"}}{{/crossLink}})</li>\n    <li>text ({{#crossLink \"LoadQueue/TEXT:property\"}}{{/crossLink}})</li>\n    <li>xml ({{#crossLink \"LoadQueue/XML:property\"}}{{/crossLink}})</li>\n</ul>\n\nA plugin defines what types or extensions it handles via a {{#crossLink \"SamplePlugin/getPreloadHandlers\"}}{{/crossLink}}\nmethod, which is called when a plugin is first registered.\n\nTo register a plugin with PreloadJS, simply install it into a LoadQueue before files begin to load using the\n{{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}} method:\n\n     var queue = new createjs.LoadQueue();\n     queue.installPlugin(createjs.SamplePlugin);\n     queue.loadFile(\"test.jpg\");\n\nThe {{#crossLink \"SamplePlugin/getPreloadHandlers\"}}{{/crossLink}} method can also return a `callback`\nproperty, which is a function that will be invoked before each file is loaded. Check out the {{#crossLink \"SamplePlugin/preloadHandler\"}}{{/crossLink}}\nfor more information on how the callback works. For example, the SoundJS plugin allows PreloadJS to manage a\ndownload that uses the Flash Player.",
            "static": 1
        },
        "DataUtils": {
            "name": "DataUtils",
            "shortname": "DataUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/utils/DataUtils.js",
            "line": 36,
            "description": "A few data utilities for formatting different data types."
        },
        "DomUtils": {
            "name": "DomUtils",
            "shortname": "DomUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/utils/Elements.js",
            "line": 37,
            "description": "Convenience methods for creating various elements used by PrelaodJS."
        },
        "RequestUtils": {
            "name": "RequestUtils",
            "shortname": "RequestUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/utils/RequestUtils.js",
            "line": 36,
            "description": "Utilities that assist with parsing load items, and determining file types, etc."
        },
        "URLUtils": {
            "name": "URLUtils",
            "shortname": "URLUtils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/utils/URLUtils.js",
            "line": 36,
            "description": "Utilities that assist with parsing load items, and determining file types, etc."
        },
        "LoadQueue": {
            "name": "LoadQueue",
            "shortname": "LoadQueue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/LoadQueue.js",
            "line": 109,
            "description": "The LoadQueue class is the main API for preloading content. LoadQueue is a load manager, which can preload either\na single file, or queue of files.\n\n<b>Creating a Queue</b><br />\nTo use LoadQueue, create a LoadQueue instance. If you want to force tag loading where possible, set the preferXHR\nargument to false.\n\n     var queue = new createjs.LoadQueue(true);\n\n<b>Listening for Events</b><br />\nAdd any listeners you want to the queue. Since PreloadJS 0.3.0, the {{#crossLink \"EventDispatcher\"}}{{/crossLink}}\nlets you add as many listeners as you want for events. You can subscribe to the following events:<ul>\n    <li>{{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}}: fired when a queue completes loading all\n    files</li>\n    <li>{{#crossLink \"AbstractLoader/error:event\"}}{{/crossLink}}: fired when the queue encounters an error with\n    any file.</li>\n    <li>{{#crossLink \"AbstractLoader/progress:event\"}}{{/crossLink}}: Progress for the entire queue has\n    changed.</li>\n    <li>{{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}}: A single file has completed loading.</li>\n    <li>{{#crossLink \"LoadQueue/fileprogress:event\"}}{{/crossLink}}: Progress for a single file has changes. Note\n    that only files loaded with XHR (or possibly by plugins) will fire progress events other than 0 or 100%.</li>\n</ul>\n\n     queue.on(\"fileload\", handleFileLoad, this);\n     queue.on(\"complete\", handleComplete, this);\n\n<b>Adding files and manifests</b><br />\nAdd files you want to load using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} or add multiple files at a\ntime using a list or a manifest definition using {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}. Files are\nappended to the end of the active queue, so you can use these methods as many times as you like, whenever you\nlike.\n\n     queue.loadFile(\"filePath/file.jpg\");\n     queue.loadFile({id:\"image\", src:\"filePath/file.jpg\"});\n     queue.loadManifest([\"filePath/file.jpg\", {id:\"image\", src:\"filePath/file.jpg\"}]);\n\n     // Use an external manifest\n     queue.loadManifest(\"path/to/manifest.json\");\n     queue.loadManifest({src:\"manifest.json\", type:\"manifest\"});\n\nIf you pass `false` as the `loadNow` parameter, the queue will not kick of the load of the files, but it will not\nstop if it has already been started. Call the {{#crossLink \"AbstractLoader/load\"}}{{/crossLink}} method to begin\na paused queue. Note that a paused queue will automatically resume when new files are added to it with a\n`loadNow` argument of `true`.\n\n     queue.load();\n\n<b>File Types</b><br />\nThe file type of a manifest item is auto-determined by the file extension. The pattern matching in PreloadJS\nshould handle the majority of standard file and url formats, and works with common file extensions. If you have\neither a non-standard file extension, or are serving the file using a proxy script, then you can pass in a\n<code>type</code> property with any manifest item.\n\n     queue.loadFile({src:\"path/to/myFile.mp3x\", type:createjs.Types.SOUND});\n\n     // Note that PreloadJS will not read a file extension from the query string\n     queue.loadFile({src:\"http://server.com/proxy?file=image.jpg\", type:createjs.Types.IMAGE});\n\nSupported types are defined on the {{#crossLink \"AbstractLoader\"}}{{/crossLink}} class, and include:\n<ul>\n    <li>{{#crossLink \"Types/BINARY:property\"}}{{/crossLink}}: Raw binary data via XHR</li>\n    <li>{{#crossLink \"Types/CSS:property\"}}{{/crossLink}}: CSS files</li>\n    <li>{{#crossLink \"Types/IMAGE:property\"}}{{/crossLink}}: Common image formats</li>\n    <li>{{#crossLink \"Types/JAVASCRIPT:property\"}}{{/crossLink}}: JavaScript files</li>\n    <li>{{#crossLink \"Types/JSON:property\"}}{{/crossLink}}: JSON data</li>\n    <li>{{#crossLink \"Types/JSONP:property\"}}{{/crossLink}}: JSON files cross-domain</li>\n    <li>{{#crossLink \"Types/MANIFEST:property\"}}{{/crossLink}}: A list of files to load in JSON format, see\n    {{#crossLink \"AbstractLoader/loadManifest\"}}{{/crossLink}}</li>\n    <li>{{#crossLink \"Types/SOUND:property\"}}{{/crossLink}}: Audio file formats</li>\n    <li>{{#crossLink \"Types/SPRITESHEET:property\"}}{{/crossLink}}: JSON SpriteSheet definitions. This\n    will also load sub-images, and provide a {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance.</li>\n    <li>{{#crossLink \"Types/SVG:property\"}}{{/crossLink}}: SVG files</li>\n    <li>{{#crossLink \"Types/TEXT:property\"}}{{/crossLink}}: Text files - XHR only</li>\n    <li>{{#crossLink \"Types/VIDEO:property\"}}{{/crossLink}}: Video objects</li>\n    <li>{{#crossLink \"Types/XML:property\"}}{{/crossLink}}: XML data</li>\n</ul>\n\n<em>Note: Loader types used to be defined on LoadQueue, but have been moved to the Types class</em>\n\n<b>Handling Results</b><br />\nWhen a file is finished downloading, a {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event is\ndispatched. In an example above, there is an event listener snippet for fileload. Loaded files are usually a\nformatted object that can be used immediately, including:\n<ul>\n    <li>Binary: The binary loaded result</li>\n    <li>CSS: A &lt;link /&gt; tag</li>\n    <li>Image: An &lt;img /&gt; tag</li>\n    <li>JavaScript: A &lt;script /&gt; tag</li>\n    <li>JSON/JSONP: A formatted JavaScript Object</li>\n    <li>Manifest: A JavaScript object.\n    <li>Sound: An &lt;audio /&gt; tag</a>\n    <li>SpriteSheet: A {{#crossLink \"SpriteSheet\"}}{{/crossLink}} instance, containing loaded images.\n    <li>SVG: An &lt;object /&gt; tag</li>\n    <li>Text: Raw text</li>\n    <li>Video: A Video DOM node</li>\n    <li>XML: An XML DOM node</li>\n</ul>\n\n     function handleFileLoad(event) {\n         var item = event.item; // A reference to the item that was passed in to the LoadQueue\n         var type = item.type;\n\n         // Add any images to the page body.\n         if (type == createjs.Types.IMAGE) {\n             document.body.appendChild(event.result);\n         }\n     }\n\nAt any time after the file has been loaded (usually after the queue has completed), any result can be looked up\nvia its \"id\" using {{#crossLink \"LoadQueue/getResult\"}}{{/crossLink}}. If no id was provided, then the\n\"src\" or file path can be used instead, including the `path` defined by a manifest, but <strong>not including</strong>\na base path defined on the LoadQueue. It is recommended to always pass an id if you want to look up content.\n\n     var image = queue.getResult(\"image\");\n     document.body.appendChild(image);\n\nRaw loaded content can be accessed using the <code>rawResult</code> property of the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}}\nevent, or can be looked up using {{#crossLink \"LoadQueue/getResult\"}}{{/crossLink}}, passing `true` as the 2nd\nargument. This is only applicable for content that has been parsed for the browser, specifically: JavaScript,\nCSS, XML, SVG, and JSON objects, or anything loaded with XHR.\n\n     var image = queue.getResult(\"image\", true); // load the binary image data loaded with XHR.\n\n<b>Plugins</b><br />\nLoadQueue has a simple plugin architecture to help process and preload content. For example, to preload audio,\nmake sure to install the <a href=\"http://soundjs.com\">SoundJS</a> Sound class, which will help load HTML audio,\nFlash audio, and WebAudio files. This should be installed <strong>before</strong> loading any audio files.\n\n     queue.installPlugin(createjs.Sound);\n\n<h4>Known Browser Issues</h4>\n<ul>\n    <li>Browsers without audio support can not load audio files.</li>\n    <li>Safari on Mac OS X can only play HTML audio if QuickTime is installed</li>\n    <li>HTML Audio tags will only download until their <code>canPlayThrough</code> event is fired. Browsers other\n    than Chrome will continue to download in the background.</li>\n    <li>When loading scripts using tags, they are automatically added to the document.</li>\n    <li>Scripts loaded via XHR may not be properly inspectable with browser tools.</li>\n    <li>IE6 and IE7 (and some other browsers) may not be able to load XML, Text, or JSON, since they require\n    XHR to work.</li>\n    <li>Content loaded via tags will not show progress, and will continue to download in the background when\n    canceled, although no events will be dispatched.</li>\n</ul>",
            "params": [
                {
                    "name": "preferXHR",
                    "description": "Determines whether the preload instance will favor loading with XHR (XML HTTP\nRequests), or HTML tags. When this is `false`, the queue will use tag loading when possible, and fall back on XHR\nwhen necessary.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "basePath",
                    "description": "A path that will be prepended on to the source parameter of all items in the queue\nbefore they are loaded.  Sources beginning with a protocol such as `http://` or a relative path such as `../`\nwill not receive a base path.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"\""
                },
                {
                    "name": "crossOrigin",
                    "description": "An optional flag to support images loaded from a CORS-enabled server. To\nuse it, set this value to `true`, which will default the crossOrigin property on images to \"Anonymous\". Any\nstring value will be passed through, but only \"\" and \"Anonymous\" are recommended. <strong>Note: The crossOrigin\nparameter is deprecated. Use LoadItem.crossOrigin instead</strong>",
                    "type": "String|Boolean",
                    "optional": true,
                    "optdefault": "\"\""
                }
            ],
            "is_constructor": 1,
            "extends": "AbstractLoader"
        },
        "PreloadJS": {
            "name": "PreloadJS",
            "shortname": "PreloadJS",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "PreloadJS",
            "namespace": "",
            "file": "preloadjs/version.js",
            "line": 6,
            "description": "Static class holding library specific information such as the version and buildDate of the library."
        }
    },
    "classitems": [
        {
            "file": "createjs/events/ErrorEvent.js",
            "line": 50,
            "description": "The short error title, which indicates the type of error that occurred.",
            "itemtype": "property",
            "name": "title",
            "type": "String",
            "class": "ErrorEvent",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/ErrorEvent.js",
            "line": 57,
            "description": "The verbose error message, containing details about the error.",
            "itemtype": "property",
            "name": "message",
            "type": "String",
            "class": "ErrorEvent",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/ErrorEvent.js",
            "line": 64,
            "description": "Additional data attached to an error.",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "class": "ErrorEvent",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 64,
            "description": "The type of event.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 71,
            "description": "The object that generated an event.",
            "itemtype": "property",
            "name": "target",
            "type": "Object",
            "default": "null",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 80,
            "description": "The current target that a bubbling event is being dispatched from. For non-bubbling events, this will\nalways be the same as target. For example, if childObj.parent = parentObj, and a bubbling event\nis generated from childObj, then a listener on parentObj would receive the event with\ntarget=childObj (the original target) and currentTarget=parentObj (where the listener was added).",
            "itemtype": "property",
            "name": "currentTarget",
            "type": "Object",
            "default": "null",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 92,
            "description": "For bubbling events, this indicates the current event phase:<OL>\n\t<LI> capture phase: starting from the top parent to the target</LI>\n\t<LI> at target phase: currently being dispatched from the target</LI>\n\t<LI> bubbling phase: from the target to the top parent</LI>\n</OL>",
            "itemtype": "property",
            "name": "eventPhase",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 105,
            "description": "Indicates whether the event will bubble through the display list.",
            "itemtype": "property",
            "name": "bubbles",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 114,
            "description": "Indicates whether the default behaviour of this event can be cancelled via\n{{#crossLink \"Event/preventDefault\"}}{{/crossLink}}. This is set via the Event constructor.",
            "itemtype": "property",
            "name": "cancelable",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 124,
            "description": "The epoch time at which this event was created.",
            "itemtype": "property",
            "name": "timeStamp",
            "type": "Number",
            "default": "0",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 133,
            "description": "Indicates if {{#crossLink \"Event/preventDefault\"}}{{/crossLink}} has been called\non this event.",
            "itemtype": "property",
            "name": "defaultPrevented",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 143,
            "description": "Indicates if {{#crossLink \"Event/stopPropagation\"}}{{/crossLink}} or\n{{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called on this event.",
            "itemtype": "property",
            "name": "propagationStopped",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 153,
            "description": "Indicates if {{#crossLink \"Event/stopImmediatePropagation\"}}{{/crossLink}} has been called\non this event.",
            "itemtype": "property",
            "name": "immediatePropagationStopped",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 163,
            "description": "Indicates if {{#crossLink \"Event/remove\"}}{{/crossLink}} has been called on this event.",
            "itemtype": "property",
            "name": "removed",
            "type": "Boolean",
            "default": "false",
            "readonly": "",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 175,
            "description": "Sets {{#crossLink \"Event/defaultPrevented\"}}{{/crossLink}} to true if the event is cancelable.\nMirrors the DOM level 2 event standard. In general, cancelable events that have `preventDefault()` called will\ncancel the default behaviour associated with the event.",
            "itemtype": "method",
            "name": "preventDefault",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 185,
            "description": "Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} to true.\nMirrors the DOM event standard.",
            "itemtype": "method",
            "name": "stopPropagation",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 194,
            "description": "Sets {{#crossLink \"Event/propagationStopped\"}}{{/crossLink}} and\n{{#crossLink \"Event/immediatePropagationStopped\"}}{{/crossLink}} to true.\nMirrors the DOM event standard.",
            "itemtype": "method",
            "name": "stopImmediatePropagation",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 204,
            "description": "Causes the active listener to be removed via removeEventListener();\n\n\t\tmyBtn.addEventListener(\"click\", function(evt) {\n\t\t\t// do stuff...\n\t\t\tevt.remove(); // removes this listener.\n\t\t});",
            "itemtype": "method",
            "name": "remove",
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 218,
            "description": "Returns a clone of the Event instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Event instance.",
                "type": "Event"
            },
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 227,
            "description": "Provides a chainable shortcut method for setting a number of properties on the instance.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "props",
                    "description": "A generic object containing properties to copy to the instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the instance the method is called on (useful for chaining calls.)",
                "type": "Event"
            },
            "chainable": 1,
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/Event.js",
            "line": 240,
            "description": "Returns a string representation of this object.",
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "Event",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 99,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_listeners",
            "type": "Object",
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 106,
            "access": "protected",
            "tagname": "",
            "itemtype": "property",
            "name": "_captureListeners",
            "type": "Object",
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 116,
            "description": "Static initializer to mix EventDispatcher methods into a target object or prototype.\n\n\t\tEventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class\n\t\tEventDispatcher.initialize(myObject); // add to a specific instance",
            "itemtype": "method",
            "name": "initialize",
            "static": 1,
            "params": [
                {
                    "name": "target",
                    "description": "The target object to inject EventDispatcher methods into. This can be an instance or a\nprototype.",
                    "type": "Object"
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 140,
            "description": "Adds the specified event listener. Note that adding multiple listeners to the same function will result in\nmultiple callbacks getting fired.\n\n<h4>Example</h4>\n\n     displayObject.addEventListener(\"click\", handleClick);\n     function handleClick(event) {\n        // Click happened.\n     }",
            "itemtype": "method",
            "name": "addEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when\nthe event is dispatched.",
                    "type": "Function | Object"
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the listener for chaining or assignment.",
                "type": "Function | Object"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 173,
            "description": "A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener\nonly run once, associate arbitrary data with the listener, and remove the listener.\n\nThis method works by creating an anonymous wrapper function and subscribing it with addEventListener.\nThe wrapper function is returned for use with `removeEventListener` (or `off`).\n\n<b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener, or use\n{{#crossLink \"Event/remove\"}}{{/crossLink}}. Likewise, each time you call `on` a NEW wrapper function is subscribed, so multiple calls\nto `on` with the same params will create multiple listeners.\n\n<h4>Example</h4>\n\n\t\tvar listener = myBtn.on(\"click\", handleClick, null, false, {count:3});\n\t\tfunction handleClick(evt, data) {\n\t\t\tdata.count -= 1;\n\t\t\tconsole.log(this == myBtn); // true - scope defaults to the dispatcher\n\t\t\tif (data.count == 0) {\n\t\t\t\talert(\"clicked 3 times!\");\n\t\t\t\tmyBtn.off(\"click\", listener);\n\t\t\t\t// alternately: evt.remove();\n\t\t\t}\n\t\t}",
            "itemtype": "method",
            "name": "on",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "An object with a handleEvent method, or a function that will be called when\nthe event is dispatched.",
                    "type": "Function | Object"
                },
                {
                    "name": "scope",
                    "description": "The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "once",
                    "description": "If true, the listener will remove itself after the first time it is triggered.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "data",
                    "description": "Arbitrary data that will be included as the second parameter when the listener is called.",
                    "type": "*",
                    "optional": true
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.",
                "type": "Function"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 219,
            "description": "Removes the specified event listener.\n\n<b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy\nfunction, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or\nclosure will not work.\n\n<h4>Example</h4>\n\n     displayObject.removeEventListener(\"click\", handleClick);",
            "itemtype": "method",
            "name": "removeEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object.",
                    "type": "Function | Object"
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 249,
            "description": "A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the\n.on method.\n\n<b>IMPORTANT:</b> To remove a listener added with `on`, you must pass in the returned wrapper function as the listener. See \n{{#crossLink \"EventDispatcher/on\"}}{{/crossLink}} for an example.",
            "itemtype": "method",
            "name": "off",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                },
                {
                    "name": "listener",
                    "description": "The listener function or object.",
                    "type": "Function | Object"
                },
                {
                    "name": "useCapture",
                    "description": "For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 263,
            "description": "Removes all listeners for the specified type, or all listeners of all types.\n\n<h4>Example</h4>\n\n     // Remove all listeners\n     displayObject.removeAllEventListeners();\n\n     // Remove all click listeners\n     displayObject.removeAllEventListeners(\"click\");",
            "itemtype": "method",
            "name": "removeAllEventListeners",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event. If omitted, all listeners for all types will be removed.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 285,
            "description": "Dispatches the specified event to all listeners.\n\n<h4>Example</h4>\n\n     // Use a string event\n     this.dispatchEvent(\"complete\");\n\n     // Use an Event instance\n     var event = new createjs.Event(\"progress\");\n     this.dispatchEvent(event);",
            "itemtype": "method",
            "name": "dispatchEvent",
            "params": [
                {
                    "name": "eventObj",
                    "description": "An object with a \"type\" property, or a string type.\nWhile a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,\ndispatchEvent will construct an Event instance if necessary with the specified type. This latter approach can\nbe used to avoid event object instantiation for non-bubbling events that may not have any listeners.",
                    "type": "Object | String | Event"
                },
                {
                    "name": "bubbles",
                    "description": "Specifies the `bubbles` value when a string was passed to eventObj.",
                    "type": "Boolean",
                    "optional": true
                },
                {
                    "name": "cancelable",
                    "description": "Specifies the `cancelable` value when a string was passed to eventObj.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns false if `preventDefault()` was called on a cancelable event, true otherwise.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 339,
            "description": "Indicates whether there is at least one listener for the specified event type.",
            "itemtype": "method",
            "name": "hasEventListener",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns true if there is at least one listener for the specified event.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 350,
            "description": "Indicates whether there is at least one listener for the specified event type on this object or any of its\nancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the\nspecified type is dispatched from this object, it will trigger at least one listener.\n\nThis is similar to {{#crossLink \"EventDispatcher/hasEventListener\"}}{{/crossLink}}, but it searches the entire\nevent flow for a listener, not just this object.",
            "itemtype": "method",
            "name": "willTrigger",
            "params": [
                {
                    "name": "type",
                    "description": "The string type of the event.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns `true` if there is at least one listener for the specified event.",
                "type": "Boolean"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 370,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/events/EventDispatcher.js",
            "line": 380,
            "itemtype": "method",
            "name": "_dispatchEvent",
            "params": [
                {
                    "name": "eventObj",
                    "description": "",
                    "type": "Object | Event"
                },
                {
                    "name": "eventPhase",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "EventDispatcher",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/deprecate.js",
            "line": 40,
            "description": "Wraps deprecated methods so they still be used, but throw warnings to developers.\n\n\tobj.deprecatedMethod = createjs.deprecate(\"Old Method Name\", obj._fallbackMethod);\n\nThe recommended approach for deprecated properties is:\n\n\ttry {\n\t\tObj\tect.defineProperties(object, {\n\t\t\treadyOnlyProp: { get: createjs.deprecate(\"readOnlyProp\", function() { return this.alternateProp; }) },\n\t\t\treadWriteProp: {\n\t\t\t\tget: createjs.deprecate(\"readOnlyProp\", function() { return this.alternateProp; }),\n\t\t\t\tset: createjs.deprecate(\"readOnlyProp\", function(val) { this.alternateProp = val; })\n\t\t});\n\t} catch (e) {}",
            "itemtype": "method",
            "name": "deprecate",
            "params": [
                {
                    "name": "fallbackMethod",
                    "description": "A method to call when the deprecated method is used. See the example for how",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "name",
                    "description": "The name of the method or property to display in the console warning.\nto deprecate properties.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "return": {
                "description": "If a fallbackMethod is supplied, returns a closure that will call the fallback method after\nlogging the warning in the console.",
                "type": "Function"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/extend.js",
            "line": 40,
            "description": "Sets up the prototype chain and constructor property for a new class.\n\nThis should be called right after creating the class constructor.\n\n\tfunction MySubClass() {}\n\tcreatejs.extend(MySubClass, MySuperClass);\n\tMySubClass.prototype.doSomething = function() { }\n\n\tvar foo = new MySubClass();\n\tconsole.log(foo instanceof MySuperClass); // true\n\tconsole.log(foo.prototype.constructor === MySubClass); // true",
            "itemtype": "method",
            "name": "extend",
            "params": [
                {
                    "name": "subclass",
                    "description": "The subclass.",
                    "type": "Function"
                },
                {
                    "name": "superclass",
                    "description": "The superclass to extend.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "Returns the subclass's new prototype.",
                "type": "Function"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/indexOf.js",
            "line": 40,
            "description": "Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of\nthat value.  Returns -1 if value is not found.\n\n     var i = createjs.indexOf(myArray, myElementToFind);",
            "itemtype": "method",
            "name": "indexOf",
            "params": [
                {
                    "name": "array",
                    "description": "Array to search for searchElement",
                    "type": "Array"
                },
                {
                    "name": "searchElement",
                    "description": "Element to find in array."
                }
            ],
            "return": {
                "description": "The first index of searchElement in array.",
                "type": "Number"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/promote.js",
            "line": 40,
            "description": "Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.\nIt is recommended to use the super class's name as the prefix.\nAn alias to the super class's constructor is always added in the format `prefix_constructor`.\nThis allows the subclass to call super class methods without using `function.call`, providing better performance.\n\nFor example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, \"MySuperClass\")`\nwould add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the\nprototype of `MySubClass` as `MySuperClass_draw`.\n\nThis should be called after the class's prototype is fully defined.\n\n\tfunction ClassA(name) {\n\t\tthis.name = name;\n\t}\n\tClassA.prototype.greet = function() {\n\t\treturn \"Hello \"+this.name;\n\t}\n\n\tfunction ClassB(name, punctuation) {\n\t\tthis.ClassA_constructor(name);\n\t\tthis.punctuation = punctuation;\n\t}\n\tcreatejs.extend(ClassB, ClassA);\n\tClassB.prototype.greet = function() {\n\t\treturn this.ClassA_greet()+this.punctuation;\n\t}\n\tcreatejs.promote(ClassB, \"ClassA\");\n\n\tvar foo = new ClassB(\"World\", \"!?!\");\n\tconsole.log(foo.greet()); // Hello World!?!",
            "itemtype": "method",
            "name": "promote",
            "params": [
                {
                    "name": "subclass",
                    "description": "The class to promote super class methods on.",
                    "type": "Function"
                },
                {
                    "name": "prefix",
                    "description": "The prefix to add to the promoted method names. Usually the name of the superclass.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns the subclass.",
                "type": "Function"
            },
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "createjs/utils/proxy.js",
            "line": 51,
            "description": "A function proxy for methods. By default, JavaScript methods do not maintain scope, so passing a method as a\ncallback will result in the method getting called in the scope of the caller. Using a proxy ensures that the\nmethod gets called in the correct scope.\n\nAdditional arguments can be passed that will be applied to the function when it is called.\n\n<h4>Example</h4>\n\n     myObject.addEventListener(\"event\", createjs.proxy(myHandler, this, arg1, arg2));\n\n     function myHandler(arg1, arg2) {\n          // This gets called when myObject.myCallback is executed.\n     }",
            "itemtype": "method",
            "name": "proxy",
            "params": [
                {
                    "name": "method",
                    "description": "The function to call",
                    "type": "Function"
                },
                {
                    "name": "scope",
                    "description": "The scope to call the method name on",
                    "type": "Object"
                },
                {
                    "name": "arg",
                    "description": "* Arguments that are appended to the callback for additional params.",
                    "type": "Mixed",
                    "optional": true
                }
            ],
            "access": "public",
            "tagname": "",
            "static": 1,
            "class": "Utility Methods",
            "module": "CreateJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 50,
            "description": "The source of the file that is being loaded. This property is <b>required</b>. The source can either be a\nstring (recommended), or an HTML tag.\nThis can also be an object, but in that case it has to include a type and be handled by a plugin.",
            "itemtype": "property",
            "name": "src",
            "type": "{String}",
            "default": "null",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 60,
            "description": "The type file that is being loaded. The type of the file is usually inferred by the extension, but can also\nbe set manually. This is helpful in cases where a file does not have an extension.",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "default": "null",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 69,
            "description": "A string identifier which can be used to reference the loaded object. If none is provided, this will be\nautomatically set to the {{#crossLink \"src:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "id",
            "type": "{String}",
            "default": "null",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 78,
            "description": "Determines if a manifest will maintain the order of this item, in relation to other items in the manifest\nthat have also set the `maintainOrder` property to `true`. This only applies when the max connections has\nbeen set above 1 (using {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}}). Everything with this\nproperty set to `false` will finish as it is loaded. Ordered items are combined with script tags loading in\norder when {{#crossLink \"LoadQueue/maintainScriptOrder:property\"}}{{/crossLink}} is set to `true`.",
            "itemtype": "property",
            "name": "maintainOrder",
            "type": "{Boolean}",
            "default": "false",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 90,
            "description": "A callback used by JSONP requests that defines what global method to call when the JSONP content is loaded.",
            "itemtype": "property",
            "name": "callback",
            "type": "{String}",
            "default": "null",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 98,
            "description": "An arbitrary data object, which is included with the loaded object.",
            "itemtype": "property",
            "name": "data",
            "type": "{Object}",
            "default": "null",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 106,
            "description": "The request method used for HTTP calls. Both {{#crossLink \"Methods/GET:property\"}}{{/crossLink}} or\n{{#crossLink \"Methods/POST:property\"}}{{/crossLink}} request types are supported, and are defined as\nconstants on {{#crossLink \"AbstractLoader\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "method",
            "type": "{String}",
            "default": "GET",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 116,
            "description": "An object hash of name/value pairs to send to the server.",
            "itemtype": "property",
            "name": "values",
            "type": "{Object}",
            "default": "null",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 124,
            "description": "An object hash of headers to attach to an XHR request. PreloadJS will automatically attach some default\nheaders when required, including \"Origin\", \"Content-Type\", and \"X-Requested-With\". You may override the\ndefault headers by including them in your headers object.",
            "itemtype": "property",
            "name": "headers",
            "type": "{Object}",
            "default": "null",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 134,
            "description": "Enable credentials for XHR requests.",
            "itemtype": "property",
            "name": "withCredentials",
            "type": "{Boolean}",
            "default": "false",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 142,
            "description": "Set the mime type of XHR-based requests. This is automatically set to \"text/plain; charset=utf-8\" for text\nbased files (json, xml, text, css, js).",
            "itemtype": "property",
            "name": "mimeType",
            "type": "{String}",
            "default": "null",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 151,
            "description": "Sets the crossOrigin attribute for CORS-enabled images loading cross-domain.",
            "itemtype": "property",
            "name": "crossOrigin",
            "type": "{boolean}",
            "default": "Anonymous",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 159,
            "description": "The duration in milliseconds to wait before a request times out. This only applies to tag-based and and XHR\n(level one) loading, as XHR (level 2) provides its own timeout event.",
            "itemtype": "property",
            "name": "loadTimeout",
            "type": "{Number}",
            "default": "8000 (8 seconds)",
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 172,
            "description": "Default duration in milliseconds to wait before a request times out. This only applies to tag-based and and XHR\n(level one) loading, as XHR (level 2) provides its own timeout event.",
            "itemtype": "property",
            "name": "LOAD_TIMEOUT_DEFAULT",
            "type": "{number}",
            "static": 1,
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 181,
            "description": "Create a LoadItem.\n<ul>\n    <li>String-based items are converted to a LoadItem with a populated {{#crossLink \"src:property\"}}{{/crossLink}}.</li>\n    <li>LoadItem instances are returned as-is</li>\n    <li>Objects are returned with any needed properties added</li>\n</ul>",
            "itemtype": "method",
            "name": "create",
            "params": [
                {
                    "name": "value",
                    "description": "The load item value",
                    "type": "LoadItem|String|Object"
                }
            ],
            "return": {
                "description": "",
                "type": "LoadItem|Object"
            },
            "static": 1,
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/LoadItem.js",
            "line": 210,
            "description": "Provides a chainable shortcut method for setting a number of properties on the instance.\n\n<h4>Example</h4>\n\n     var loadItem = new createjs.LoadItem().set({src:\"image.png\", maintainOrder:true});",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "props",
                    "description": "A generic object containing properties to copy to the LoadItem instance.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the instance the method is called on (useful for chaining calls.)",
                "type": "LoadItem"
            },
            "class": "LoadItem",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Methods.js",
            "line": 7,
            "description": "Defines a POST request, use for a method value when loading data.",
            "itemtype": "property",
            "name": "POST",
            "type": "{string}",
            "default": "post",
            "static": 1,
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Methods.js",
            "line": 16,
            "description": "Defines a GET request, use for a method value when loading data.",
            "itemtype": "property",
            "name": "GET",
            "type": "{string}",
            "default": "get",
            "static": 1,
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 7,
            "description": "The preload type for generic binary types. Note that images are loaded as binary files when using XHR.",
            "itemtype": "property",
            "name": "BINARY",
            "type": "{String}",
            "default": "binary",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 17,
            "description": "The preload type for css files. CSS files are loaded using a &lt;link&gt; when loaded with XHR, or a\n&lt;style&gt; tag when loaded with tags.",
            "itemtype": "property",
            "name": "CSS",
            "type": "{String}",
            "default": "css",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 28,
            "description": "The preload type for font files.",
            "itemtype": "property",
            "name": "FONT",
            "type": "{String}",
            "default": "font",
            "static": 1,
            "since": "0.9.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 38,
            "description": "The preload type for fonts specified with CSS (such as Google fonts)",
            "itemtype": "property",
            "name": "FONTCSS",
            "type": "{String}",
            "default": "fontcss",
            "static": 1,
            "since": "0.9.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 48,
            "description": "The preload type for image files, usually png, gif, or jpg/jpeg. Images are loaded into an &lt;image&gt; tag.",
            "itemtype": "property",
            "name": "IMAGE",
            "type": "{String}",
            "default": "image",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 58,
            "description": "The preload type for javascript files, usually with the \"js\" file extension. JavaScript files are loaded into a\n&lt;script&gt; tag.\n\nSince version 0.4.1+, due to how tag-loaded scripts work, all JavaScript files are automatically injected into\nthe body of the document to maintain parity between XHR and tag-loaded scripts. In version 0.4.0 and earlier,\nonly tag-loaded scripts are injected.",
            "itemtype": "property",
            "name": "JAVASCRIPT",
            "type": "{String}",
            "default": "javascript",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 73,
            "description": "The preload type for json files, usually with the \"json\" file extension. JSON data is loaded and parsed into a\nJavaScript object. Note that if a `callback` is present on the load item, the file will be loaded with JSONP,\nno matter what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}} property is set to, and the JSON\nmust contain a matching wrapper function.",
            "itemtype": "property",
            "name": "JSON",
            "type": "{String}",
            "default": "json",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 86,
            "description": "The preload type for jsonp files, usually with the \"json\" file extension. JSON data is loaded and parsed into a\nJavaScript object. You are required to pass a callback parameter that matches the function wrapper in the JSON.\nNote that JSONP will always be used if there is a callback present, no matter what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}}\nproperty is set to.",
            "itemtype": "property",
            "name": "JSONP",
            "type": "{String}",
            "default": "jsonp",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 99,
            "description": "The preload type for json-based manifest files, usually with the \"json\" file extension. The JSON data is loaded\nand parsed into a JavaScript object. PreloadJS will then look for a \"manifest\" property in the JSON, which is an\nArray of files to load, following the same format as the {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}\nmethod. If a \"callback\" is specified on the manifest object, then it will be loaded using JSONP instead,\nregardless of what the {{#crossLink \"LoadQueue/preferXHR:property\"}}{{/crossLink}} property is set to.",
            "itemtype": "property",
            "name": "MANIFEST",
            "type": "{String}",
            "default": "manifest",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 113,
            "description": "The preload type for sound files, usually mp3, ogg, or wav. When loading via tags, audio is loaded into an\n&lt;audio&gt; tag.",
            "itemtype": "property",
            "name": "SOUND",
            "type": "{String}",
            "default": "sound",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 124,
            "description": "The preload type for video files, usually mp4, ts, or ogg. When loading via tags, video is loaded into an\n&lt;video&gt; tag.",
            "itemtype": "property",
            "name": "VIDEO",
            "type": "{String}",
            "default": "video",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 135,
            "description": "The preload type for SpriteSheet files. SpriteSheet files are JSON files that contain string image paths.",
            "itemtype": "property",
            "name": "SPRITESHEET",
            "type": "{String}",
            "default": "spritesheet",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 145,
            "description": "The preload type for SVG files.",
            "itemtype": "property",
            "name": "SVG",
            "type": "{String}",
            "default": "svg",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 155,
            "description": "The preload type for text files, which is also the default file type if the type can not be determined. Text is\nloaded as raw text.",
            "itemtype": "property",
            "name": "TEXT",
            "type": "{String}",
            "default": "text",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/data/Types.js",
            "line": 166,
            "description": "The preload type for xml files. XML is loaded into an XML document.",
            "itemtype": "property",
            "name": "XML",
            "type": "{String}",
            "default": "xml",
            "static": 1,
            "since": "0.6.0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/events/ProgressEvent.js",
            "line": 53,
            "description": "The amount that has been loaded (out of a total amount)",
            "itemtype": "property",
            "name": "loaded",
            "type": "{Number}",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/events/ProgressEvent.js",
            "line": 60,
            "description": "The total \"size\" of the load.",
            "itemtype": "property",
            "name": "total",
            "type": "{Number}",
            "default": "1",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/events/ProgressEvent.js",
            "line": 68,
            "description": "The percentage (out of 1) that the load has been completed. This is calculated using `loaded/total`.",
            "itemtype": "property",
            "name": "progress",
            "type": "{Number}",
            "default": "0",
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/events/ProgressEvent.js",
            "line": 79,
            "description": "Returns a clone of the ProgressEvent instance.",
            "itemtype": "method",
            "name": "clone",
            "return": {
                "description": "a clone of the Event instance.",
                "type": "ProgressEvent"
            },
            "class": "ProgressEvent",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 57,
            "description": "If the loader has completed loading. This provides a quick check, but also ensures that the different approaches\nused for loading do not pile up resulting in more than one `complete` {{#crossLink \"Event\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "loaded",
            "type": "{Boolean}",
            "default": "false",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 66,
            "description": "Determine if the loader was canceled. Canceled loads will not fire complete events. Note that this property\nis readonly, so {{#crossLink \"LoadQueue\"}}{{/crossLink}} queues should be closed using {{#crossLink \"LoadQueue/close\"}}{{/crossLink}}\ninstead.",
            "itemtype": "property",
            "name": "canceled",
            "type": "{Boolean}",
            "default": "false",
            "readonly": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 77,
            "description": "The current load progress (percentage) for this item. This will be a number between 0 and 1.\n\n<h4>Example</h4>\n\n    var queue = new createjs.LoadQueue();\n    queue.loadFile(\"largeImage.png\");\n    queue.on(\"progress\", function() {\n        console.log(\"Progress:\", queue.progress, event.progress);\n    });",
            "itemtype": "property",
            "name": "progress",
            "type": "{Number}",
            "default": "0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 94,
            "description": "The type of item this loader will load. See {{#crossLink \"AbstractLoader\"}}{{/crossLink}} for a full list of\nsupported types.",
            "itemtype": "property",
            "name": "type",
            "type": "{String}",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 102,
            "description": "A formatter function that converts the loaded raw result into the final result. For example, the JSONLoader\nconverts a string of text into a JavaScript object. Not all loaders have a resultFormatter, and this property\ncan be overridden to provide custom formatting.\n\nOptionally, a resultFormatter can return a callback function in cases where the formatting needs to be\nasynchronous, such as creating a new image. The callback function is passed 2 parameters, which are callbacks\nto handle success and error conditions in the resultFormatter. Note that the resultFormatter method is\ncalled in the current scope, as well as the success and error callbacks.\n\n<h4>Example asynchronous resultFormatter</h4>\n\n\tfunction _formatResult(loader) {\n\t\treturn function(success, error) {\n\t\t\tif (errorCondition) { error(errorDetailEvent); }\n\t\t\tsuccess(result);\n\t\t}\n\t}",
            "itemtype": "property",
            "name": "resultFormatter",
            "type": "{Function}",
            "default": "null",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 127,
            "description": "The {{#crossLink \"LoadItem\"}}{{/crossLink}} this loader represents. Note that this is null in a {{#crossLink \"LoadQueue\"}}{{/crossLink}},\nbut will be available on loaders such as {{#crossLink \"XMLLoader\"}}{{/crossLink}} and {{#crossLink \"ImageLoader\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_item",
            "type": "{LoadItem|Object}",
            "access": "private",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 140,
            "description": "Whether the loader will try and load content using XHR (true) or HTML tags (false).",
            "itemtype": "property",
            "name": "_preferXHR",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 148,
            "description": "The loaded result after it is formatted by an optional {{#crossLink \"resultFormatter\"}}{{/crossLink}}. For\nitems that are not formatted, this will be the same as the {{#crossLink \"_rawResult:property\"}}{{/crossLink}}.\nThe result is accessed using the {{#crossLink \"getResult\"}}{{/crossLink}} method.",
            "itemtype": "property",
            "name": "_result",
            "type": "{Object|String}",
            "access": "private",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 158,
            "description": "The loaded result before it is formatted. The rawResult is accessed using the {{#crossLink \"getResult\"}}{{/crossLink}}\nmethod, and passing `true`.",
            "itemtype": "property",
            "name": "_rawResult",
            "type": "{Object|String}",
            "access": "private",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 167,
            "description": "A list of items that loaders load behind the scenes. This does not include the main item the loader is\nresponsible for loading. Examples of loaders that have sub-items include the {{#crossLink \"SpriteSheetLoader\"}}{{/crossLink}} and\n{{#crossLink \"ManifestLoader\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_loadItems",
            "type": "{null}",
            "access": "protected",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 177,
            "description": "The attribute the items loaded using tags use for the source.",
            "type": "{string}",
            "default": "null",
            "access": "private",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 185,
            "description": "An HTML tag (or similar) that a loader may use to load HTML content, such as images, scripts, etc.",
            "itemtype": "property",
            "name": "_tag",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 222,
            "description": "The {{#crossLink \"ProgressEvent\"}}{{/crossLink}} that is fired when the overall progress changes. Prior to\nversion 0.6.0, this was just a regular {{#crossLink \"Event\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "progress",
            "since": "0.3.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 229,
            "description": "The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when a load starts.",
            "itemtype": "event",
            "name": "loadstart",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.3.1",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 237,
            "description": "The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when the entire queue has been loaded.",
            "itemtype": "event",
            "name": "complete",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                }
            ],
            "since": "0.3.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 245,
            "description": "The {{#crossLink \"ErrorEvent\"}}{{/crossLink}} that is fired when the loader encounters an error. If the error was\nencountered by a file, the event will contain the item that caused the error. Prior to version 0.6.0, this was\njust a regular {{#crossLink \"Event\"}}{{/crossLink}}.",
            "itemtype": "event",
            "name": "error",
            "since": "0.3.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 253,
            "description": "The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when the loader encounters an internal file load error.\nThis enables loaders to maintain internal queues, and surface file load errors.",
            "itemtype": "event",
            "name": "fileerror",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type (\"fileerror\")",
                    "type": "String"
                },
                {
                    "name": "The",
                    "description": "item that encountered the error",
                    "type": "LoadItem|object"
                }
            ],
            "since": "0.6.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 263,
            "description": "The {{#crossLink \"Event\"}}{{/crossLink}} that is fired when a loader internally loads a file. This enables\nloaders such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}} to maintain internal {{#crossLink \"LoadQueue\"}}{{/crossLink}}s\nand notify when they have loaded a file. The {{#crossLink \"LoadQueue\"}}{{/crossLink}} class dispatches a\nslightly different {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event.",
            "itemtype": "event",
            "name": "fileload",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type (\"fileload\")",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The file item which was specified in the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\nor {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}} call. If only a string path or tag was specified, the\nobject will contain that value as a `src` property.",
                    "type": "Object"
                },
                {
                    "name": "result",
                    "description": "The HTML tag or parsed result of the loaded item.",
                    "type": "Object"
                },
                {
                    "name": "rawResult",
                    "description": "The unprocessed result, usually the raw text or binary data before it is converted\nto a usable object.",
                    "type": "Object"
                }
            ],
            "since": "0.6.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 280,
            "description": "The {{#crossLink \"Event\"}}{{/crossLink}} that is fired after the internal request is created, but before a load.\nThis allows updates to the loader for specific loading needs, such as binary or XHR image loading.",
            "itemtype": "event",
            "name": "initialize",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type (\"initialize\")",
                    "type": "String"
                },
                {
                    "name": "loader",
                    "description": "The loader that has been initialized.",
                    "type": "AbstractLoader"
                }
            ],
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 290,
            "description": "Get a reference to the manifest item that is loaded by this loader. In some cases this will be the value that was\npassed into {{#crossLink \"LoadQueue\"}}{{/crossLink}} using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} or\n{{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}. However if only a String path was passed in, then it will\nbe a {{#crossLink \"LoadItem\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getItem",
            "return": {
                "description": "The manifest item that this loader is responsible for loading.",
                "type": "Object"
            },
            "since": "0.6.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 303,
            "description": "Get a reference to the content that was loaded by the loader (only available after the {{#crossLink \"complete:event\"}}{{/crossLink}}\nevent is dispatched.",
            "itemtype": "method",
            "name": "getResult",
            "params": [
                {
                    "name": "raw",
                    "description": "Determines if the returned result will be the formatted content, or the raw loaded\ndata (if it exists).",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "since": "0.6.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 316,
            "description": "Return the `tag` this object creates or uses for loading.",
            "itemtype": "method",
            "name": "getTag",
            "return": {
                "description": "The tag instance",
                "type": "Object"
            },
            "since": "0.6.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 326,
            "description": "Set the `tag` this item uses for loading.",
            "itemtype": "method",
            "name": "setTag",
            "params": [
                {
                    "name": "tag",
                    "description": "The tag instance",
                    "type": "Object"
                }
            ],
            "since": "0.6.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 336,
            "description": "Begin loading the item. This method is required when using a loader by itself.\n\n<h4>Example</h4>\n\n     var queue = new createjs.LoadQueue();\n     queue.on(\"complete\", handleComplete);\n     queue.loadManifest(fileArray, false); // Note the 2nd argument that tells the queue not to start loading yet\n     queue.load();",
            "itemtype": "method",
            "name": "load",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 365,
            "description": "Close the the item. This will stop any open requests (although downloads using HTML tags may still continue in\nthe background), but events will not longer be dispatched.",
            "itemtype": "method",
            "name": "cancel",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 375,
            "description": "Clean up the loader.",
            "itemtype": "method",
            "name": "destroy",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 396,
            "description": "Get any items loaded internally by the loader. The enables loaders such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}}\nto expose items it loads internally.",
            "itemtype": "method",
            "name": "getLoadedItems",
            "return": {
                "description": "A list of the items loaded by the loader.",
                "type": "Array"
            },
            "since": "0.6.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 409,
            "description": "Create an internal request used for loading. By default, an {{#crossLink \"XHRRequest\"}}{{/crossLink}} or\n{{#crossLink \"TagRequest\"}}{{/crossLink}} is created, depending on the value of {{#crossLink \"preferXHR:property\"}}{{/crossLink}}.\nOther loaders may override this to use different request types, such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}},\nwhich uses {{#crossLink \"JSONLoader\"}}{{/crossLink}} or {{#crossLink \"JSONPLoader\"}}{{/crossLink}} under the hood.",
            "itemtype": "method",
            "name": "_createRequest",
            "access": "protected",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 425,
            "description": "Create the HTML tag used for loading. This method does nothing by default, and needs to be implemented\nby loaders that require tag loading.",
            "itemtype": "method",
            "name": "_createTag",
            "params": [
                {
                    "name": "src",
                    "description": "The tag source",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The tag that was created",
                "type": "HTMLElement"
            },
            "access": "protected",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 435,
            "description": "Dispatch a loadstart {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/loadstart:event\"}}{{/crossLink}}\nevent for details on the event payload.",
            "itemtype": "method",
            "name": "_sendLoadStart",
            "access": "protected",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 446,
            "description": "Dispatch a {{#crossLink \"ProgressEvent\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_sendProgress",
            "params": [
                {
                    "name": "value",
                    "description": "The progress of the loaded item, or an object containing <code>loaded</code>\nand <code>total</code> properties.",
                    "type": "Number | Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 468,
            "description": "Dispatch a complete {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}} event",
            "itemtype": "method",
            "name": "_sendComplete",
            "access": "protected",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 488,
            "description": "Dispatch an error {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"AbstractLoader/error:event\"}}{{/crossLink}}\nevent for details on the event payload.",
            "itemtype": "method",
            "name": "_sendError",
            "params": [
                {
                    "name": "event",
                    "description": "The event object containing specific error properties.",
                    "type": "ErrorEvent"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 503,
            "description": "Determine if the load has been canceled. This is important to ensure that method calls or asynchronous events\ndo not cause issues after the queue has been cleaned up.",
            "itemtype": "method",
            "name": "_isCanceled",
            "return": {
                "description": "If the loader has been canceled.",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 517,
            "description": "A custom result formatter function, which is called just before a request dispatches its complete event. Most\nloader types already have an internal formatter, but this can be user-overridden for custom formatting. The\nformatted result will be available on Loaders using {{#crossLink \"getResult\"}}{{/crossLink}}, and passing `true`.",
            "itemtype": "property",
            "name": "resultFormatter",
            "type": "Function",
            "return": {
                "description": "The formatted result",
                "type": "Object"
            },
            "since": "0.6.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 528,
            "description": "Handle events from internal requests. By default, loaders will handle, and redispatch the necessary events, but\nthis method can be overridden for custom behaviours.",
            "itemtype": "method",
            "name": "handleEvent",
            "params": [
                {
                    "name": "event",
                    "description": "The event that the internal request dispatches.",
                    "type": "Event"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 571,
            "description": "The \"success\" callback passed to {{#crossLink \"AbstractLoader/resultFormatter\"}}{{/crossLink}} asynchronous\nfunctions.",
            "itemtype": "method",
            "name": "_resultFormatSuccess",
            "params": [
                {
                    "name": "result",
                    "description": "The formatted result",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 583,
            "description": "The \"error\" callback passed to {{#crossLink \"AbstractLoader/resultFormatter\"}}{{/crossLink}} asynchronous\nfunctions.",
            "itemtype": "method",
            "name": "_resultFormatSuccess",
            "params": [
                {
                    "name": "error",
                    "description": "The error event",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractLoader.js",
            "line": 594,
            "itemtype": "method",
            "name": "toString",
            "return": {
                "description": "a string representation of the instance.",
                "type": "String"
            },
            "class": "AbstractLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractMediaLoader.js",
            "line": 80,
            "description": "Creates a new tag for loading if it doesn't exist yet.",
            "itemtype": "method",
            "name": "_createTag",
            "access": "private",
            "tagname": "",
            "class": "AbstractMediaLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/AbstractMediaLoader.js",
            "line": 97,
            "description": "Before the item loads, set its mimeType and responseType.",
            "itemtype": "property",
            "name": "_updateXHR",
            "access": "private",
            "tagname": "",
            "class": "AbstractMediaLoader",
            "module": "PreloadJS",
            "subprops": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ]
        },
        {
            "file": "preloadjs/loaders/AbstractMediaLoader.js",
            "line": 110,
            "description": "The result formatter for media files.",
            "itemtype": "method",
            "name": "_formatResult",
            "params": [
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLVideoElement|HTMLAudioElement"
            },
            "access": "private",
            "tagname": "",
            "class": "AbstractMediaLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/BinaryLoader.js",
            "line": 57,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/BINARY:property\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "BinaryLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/BinaryLoader.js",
            "line": 70,
            "description": "Before the item loads, set the response type to \"arraybuffer\"",
            "itemtype": "property",
            "name": "_updateXHR",
            "access": "private",
            "tagname": "",
            "class": "BinaryLoader",
            "module": "PreloadJS",
            "subprops": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ]
        },
        {
            "file": "preloadjs/loaders/CSSLoader.js",
            "line": 72,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/CSS:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "CSSLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/CSSLoader.js",
            "line": 85,
            "description": "The result formatter for CSS files.",
            "itemtype": "method",
            "name": "_formatResult",
            "params": [
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLLinkElement|HTMLStyleElement"
            },
            "access": "private",
            "tagname": "",
            "class": "CSSLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 56,
            "description": "A lookup of font faces to load.",
            "itemtype": "property",
            "name": "_faces",
            "access": "protected",
            "tagname": "",
            "type": "Object",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 64,
            "description": "A list of font faces currently being \"watched\". Watched fonts will be tested on a regular interval, and be\nremoved from this list when they are complete.",
            "oroperty": "_watched",
            "type": "{Array}",
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 73,
            "description": "A count of the total font faces to load.",
            "itemtype": "property",
            "name": "_count",
            "type": "{number}",
            "access": "protected",
            "tagname": "",
            "default": "0",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 82,
            "description": "The interval for checking if fonts have been loaded.",
            "itemtype": "property",
            "name": "_watchInterval",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 90,
            "description": "The timeout for determining if a font can't be loaded. Uses the LoadItem {{#crossLink \"LoadImte/timeout:property\"}}{{/crossLink}}\nvalue.",
            "itemtype": "property",
            "name": "_loadTimeout",
            "type": "{Number}",
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 98,
            "description": "Determines if generated CSS should be injected into the document.",
            "itemtype": "property",
            "name": "_injectCSS",
            "type": "{boolean}",
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 110,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/FONT:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 123,
            "description": "Sample text used by the FontLoader to determine if the font has been loaded. The sample text size is compared\nto the loaded font size, and a change indicates that the font has completed.",
            "itemtype": "property",
            "name": "sampleText",
            "type": "{String}",
            "default": "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 134,
            "description": "The canvas context used to test the font size. Note that this currently requires an HTML DOM.",
            "itemtype": "property",
            "name": "_ctx",
            "type": "{CanvasRenderingContext2D}",
            "static": 1,
            "access": "private",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 143,
            "description": "A list of reference fonts to test. Multiple faces are tested to address the rare case of a loaded font being the\nexact same dimensions as the test font.",
            "itemtype": "property",
            "name": "_referenceFonts",
            "type": "{Array}",
            "default": "[\"serif\", \"monospace\"]",
            "access": "private",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 153,
            "description": "A regular expression that pulls out possible style values from the font name.\n<ul>\n    <li>This includes font names that include thin, normal, book, regular, medium, black, and heavy (such as\n    \"Arial Black\")</li>\n    <li>Weight modifiers including extra, ultra, semi, demi, light, and bold (such as \"WorkSans SemiBold\")</li>\n</ul>\n\nWeight descriptions map to font weight values by default using the following (from\nhttp://www.w3.org/TR/css3-fonts/#font-weight-numeric-values):\n<ul>\n    <li>100 - Thin</li>\n\t   <li>200 - Extra Light, Ultra Light</li>\n    <li>300 - Light, Semi Light, Demi Light</li>\n    <li>400 - Normal, Book, Regular</li>\n    <li>500 - Medium</li>\n    <li>600 - Semi Bold, Demi Bold</li>\n    <li>700 - Bold</li>\n    <li>800 - Extra Bold, Ultra Bold</li>\n    <li>900 - Black, Heavy</li>\n</ul>",
            "itemtype": "property",
            "name": "WEIGHT_REGEX",
            "type": "{RegExp}",
            "static": 1,
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 180,
            "description": "A regular expression that pulls out possible style values from the font name. These include \"italic\"\nand \"oblique\".",
            "itemtype": "property",
            "name": "STYLE_REGEX",
            "type": "{RegExp}",
            "static": 1,
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 189,
            "description": "A lookup of font types for generating a CSS definition. For example, TTF fonts requires a \"truetype\" type.",
            "itemtype": "property",
            "name": "FONT_FORMAT",
            "type": "{Object}",
            "static": 1,
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 197,
            "description": "A lookup of font weights based on a name. These values are from http://www.w3.org/TR/css3-fonts/#font-weight-numeric-values.",
            "itemtype": "property",
            "name": "FONT_WEIGHT",
            "type": "{Object}",
            "static": 1,
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 205,
            "description": "The frequency in milliseconds to check for loaded fonts.",
            "itemtype": "property",
            "name": "WATCH_DURATION",
            "type": "{number}",
            "default": "10",
            "static": 1,
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 237,
            "description": "The font load has timed out. This is called via a <code>setTimeout</code>.\ncallback.",
            "itemtype": "method",
            "name": "_handleTimeout",
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 270,
            "description": "Determine if the provided CSS is a string definition, CSS HTML element, or a CSS file URI. Depending on the\nformat, the CSS will be parsed, or loaded.",
            "itemtype": "method",
            "name": "_watchCSS",
            "return": {
                "description": "Whether or not the CSS is ready",
                "type": "Boolean"
            },
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 298,
            "description": "Parse a CSS string to determine the fonts to load.",
            "itemtype": "method",
            "name": "_parseCSS",
            "params": [
                {
                    "name": "css",
                    "description": "The CSS string to parse",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 314,
            "description": "The provided fonts were an array of object or string definitions. Parse them, and inject any that are ready.",
            "itemtype": "method",
            "name": "_watchFontArray",
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 331,
            "description": "Inject any style definitions into the document head. This is necessary when the definition is just a string or\nobject definition in order for the styles to be applied to the document. If the loaded fonts are already HTML CSS\nelements, they don't need to be appended again.",
            "itemtype": "method",
            "name": "_injectStyleTag",
            "params": [
                {
                    "name": "css",
                    "description": "The CSS string content to be appended to the",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 352,
            "description": "Determine the font face from a CSS definition.",
            "itemtype": "method",
            "name": "_parseFontFace",
            "params": [
                {
                    "name": "str",
                    "description": "The CSS string definition",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "A modified CSS object containing family name, src, style, and weight",
                "type": "String"
            },
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 370,
            "description": "Add a font to the list of fonts currently being watched. If the font is already watched or loaded, it won't be\nadded again.",
            "itemtype": "method",
            "name": "_watchFont",
            "params": [
                {
                    "name": "def",
                    "description": "The font definition",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 387,
            "description": "Create a interval to check for loaded fonts. Only one interval is used for all fonts. The fonts are checked based\non the {{#crossLink \"FontLoader/WATCH_DURATION:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_startWatching",
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 398,
            "description": "Clear the interval used to check fonts. This happens when all fonts are loaded, or an error occurs, such as a\nCSS file error, or a load timeout.",
            "itemtype": "method",
            "name": "_stopWatching",
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 410,
            "description": "Check all the fonts that have not been loaded. The fonts are drawn to a canvas in memory, and if their font size\nvaries from the default text size, then the font is considered loaded.\n\nA {{#crossLink \"AbstractLoader/fileload\"}}{{/crossLink}} event will be dispatched when each file is loaded, along\nwith the font family name as the `item` value. A {{#crossLink \"ProgressEvent\"}}{{/crossLink}} is dispatched a\nmaximum of one time per check when any fonts are loaded, with the {{#crossLink \"ProgressEvent/progress:property\"}}{{/crossLink}}\nvalue showing the percentage of fonts that have loaded.",
            "itemtype": "method",
            "name": "_watch",
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 447,
            "description": "Determine the default size of the reference fonts used to compare against loaded fonts.",
            "itemtype": "method",
            "name": "_calculateReferenceSizes",
            "params": [
                {
                    "name": "def",
                    "description": "The font definition to get the size of.",
                    "type": "Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 461,
            "description": "Get a CSS definition from a font source and name.",
            "itemtype": "method",
            "name": "_defFromSrc",
            "params": [
                {
                    "name": "src",
                    "description": "The font source",
                    "type": "String"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 510,
            "description": "Get a font definition from a raw font object.",
            "itemtype": "method",
            "name": "_defFromObj",
            "params": [
                {
                    "name": "o",
                    "description": "A raw object provided to the FontLoader",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A standard font object that the FontLoader understands",
                "type": "Object"
            },
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 528,
            "description": "Get CSS from a font definition.",
            "itemtype": "method",
            "name": "_cssFromDef",
            "params": [
                {
                    "name": "def",
                    "description": "A font definition",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A CSS string representing the object",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 544,
            "description": "Get the text width of text using the family, weight, and style",
            "itemtype": "method",
            "name": "_getTextWidth",
            "params": [
                {
                    "name": "family",
                    "description": "The font family",
                    "type": "String"
                },
                {
                    "name": "weight",
                    "description": "The font weight",
                    "type": "String"
                },
                {
                    "name": "style",
                    "description": "The font style",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The pixel measurement of the font.",
                "type": "Number"
            },
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/FontLoader.js",
            "line": 559,
            "description": "Get the value of a property from a CSS string. For example, searches a CSS string for the value of the\n\"font-family\" property.",
            "itemtype": "method",
            "name": "_getCSSValue",
            "params": [
                {
                    "name": "str",
                    "description": "The CSS string to search",
                    "type": "String"
                },
                {
                    "name": "propName",
                    "description": "The property name to get the value for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The value in the CSS for the provided property name",
                "type": "String"
            },
            "access": "protected",
            "tagname": "",
            "class": "FontLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ImageLoader.js",
            "line": 76,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/IMAGE:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "ImageLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ImageLoader.js",
            "line": 105,
            "description": "Before the item loads, set its mimeType and responseType.",
            "itemtype": "property",
            "name": "_updateXHR",
            "access": "private",
            "tagname": "",
            "class": "ImageLoader",
            "module": "PreloadJS",
            "subprops": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ]
        },
        {
            "file": "preloadjs/loaders/ImageLoader.js",
            "line": 120,
            "description": "The result formatter for Image files.",
            "itemtype": "method",
            "name": "_formatResult",
            "params": [
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLImageElement"
            },
            "access": "private",
            "tagname": "",
            "class": "ImageLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ImageLoader.js",
            "line": 131,
            "description": "The asynchronous image formatter function. This is required because images have\na short delay before they are ready.",
            "itemtype": "method",
            "name": "_formatImage",
            "params": [
                {
                    "name": "successCallback",
                    "description": "The method to call when the result has finished formatting",
                    "type": "Function"
                },
                {
                    "name": "errorCallback",
                    "description": "The method to call if an error occurs during formatting",
                    "type": "Function"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ImageLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ImageLoader.js",
            "line": 171,
            "description": "Clean up the ObjectURL, the tag is done with it. Note that this function is run\nas an event listener without a proxy/closure, as it doesn't require it - so do not\ninclude any functionality that requires scope without changing it.",
            "itemtype": "method",
            "name": "_cleanUpURL",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ImageLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/JSONLoader.js",
            "line": 61,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/JSON:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSONLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/JSONLoader.js",
            "line": 74,
            "description": "The result formatter for JSON files.",
            "itemtype": "method",
            "name": "_formatResult",
            "params": [
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLLinkElement|HTMLStyleElement"
            },
            "access": "private",
            "tagname": "",
            "class": "JSONLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/JSONPLoader.js",
            "line": 94,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/JSONP:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JSONPLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/JSONPLoader.js",
            "line": 112,
            "description": "Loads the JSONp file.  Because of the unique loading needs of JSONp\nwe don't use the AbstractLoader.load() method.",
            "itemtype": "method",
            "name": "load",
            "class": "JSONPLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/JSONPLoader.js",
            "line": 145,
            "description": "Handle the JSONP callback, which is a public method defined on `window`.",
            "itemtype": "method",
            "name": "_handleLoad",
            "params": [
                {
                    "name": "data",
                    "description": "The formatted JSON data.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSONPLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/JSONPLoader.js",
            "line": 158,
            "description": "The tag request has not loaded within the time specfied in loadTimeout.",
            "itemtype": "method",
            "name": "_handleError",
            "params": [
                {
                    "name": "event",
                    "description": "The XHR error event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "JSONPLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/JSONPLoader.js",
            "line": 169,
            "description": "Clean up the JSONP load. This clears out the callback and script tag that this loader creates.",
            "itemtype": "method",
            "name": "_dispose",
            "access": "private",
            "tagname": "",
            "class": "JSONPLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/JavaScriptLoader.js",
            "line": 64,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/JAVASCRIPT:property\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "JavaScriptLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/JavaScriptLoader.js",
            "line": 77,
            "description": "The result formatter for JavaScript files.",
            "itemtype": "method",
            "name": "_formatResult",
            "params": [
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                }
            ],
            "return": {
                "description": "",
                "type": "HTMLLinkElement|HTMLStyleElement"
            },
            "access": "private",
            "tagname": "",
            "class": "JavaScriptLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ManifestLoader.js",
            "line": 76,
            "description": "An array of the plugins registered using {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}},\nused to pass plugins to new LoadQueues that may be created.",
            "itemtype": "property",
            "name": "_plugins",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "ManifestLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ManifestLoader.js",
            "line": 88,
            "description": "An internal {{#crossLink \"LoadQueue\"}}{{/crossLink}} that loads the contents of the manifest.",
            "itemtype": "property",
            "name": "_manifestQueue",
            "type": "{LoadQueue}",
            "access": "private",
            "tagname": "",
            "class": "ManifestLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ManifestLoader.js",
            "line": 101,
            "description": "The amount of progress that the manifest itself takes up.",
            "itemtype": "property",
            "name": "MANIFEST_PROGRESS",
            "type": "{number}",
            "default": "0.25 (25%)",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "ManifestLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ManifestLoader.js",
            "line": 112,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/MANIFEST:property\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "ManifestLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ManifestLoader.js",
            "line": 162,
            "description": "Create and load the manifest items once the actual manifest has been loaded.",
            "itemtype": "method",
            "name": "_loadManifest",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ManifestLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ManifestLoader.js",
            "line": 184,
            "description": "An item from the {{#crossLink \"_manifestQueue:property\"}}{{/crossLink}} has completed.",
            "itemtype": "method",
            "name": "_handleManifestFileLoad",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ManifestLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ManifestLoader.js",
            "line": 195,
            "description": "The manifest has completed loading. This triggers the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}}\n{{#crossLink \"Event\"}}{{/crossLink}} from the ManifestLoader.",
            "itemtype": "method",
            "name": "_handleManifestComplete",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ManifestLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ManifestLoader.js",
            "line": 207,
            "description": "The manifest has reported progress.",
            "itemtype": "method",
            "name": "_handleManifestProgress",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "ProgressEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ManifestLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/ManifestLoader.js",
            "line": 218,
            "description": "The manifest has reported an error with one of the files.",
            "itemtype": "method",
            "name": "_handleManifestError",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "ErrorEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "ManifestLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SVGLoader.js",
            "line": 70,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/SVG:property\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "SVGLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SVGLoader.js",
            "line": 83,
            "description": "The result formatter for SVG files.",
            "itemtype": "method",
            "name": "_formatResult",
            "params": [
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "SVGLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SoundLoader.js",
            "line": 73,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/SOUND:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "SoundLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SpriteSheetLoader.js",
            "line": 67,
            "description": "An internal queue which loads the SpriteSheet's images.",
            "itemtype": "method",
            "name": "_manifestQueue",
            "type": "{LoadQueue}",
            "access": "private",
            "tagname": "",
            "class": "SpriteSheetLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SpriteSheetLoader.js",
            "line": 80,
            "description": "The amount of progress that the manifest itself takes up.",
            "itemtype": "property",
            "name": "SPRITESHEET_PROGRESS",
            "type": "{number}",
            "default": "0.25 (25%)",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "SpriteSheetLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SpriteSheetLoader.js",
            "line": 91,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/SPRITESHEET:property\"}}{{/crossLink}}",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "SpriteSheetLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SpriteSheetLoader.js",
            "line": 137,
            "description": "Create and load the images once the SpriteSheet JSON has been loaded.",
            "itemtype": "method",
            "name": "_loadManifest",
            "params": [
                {
                    "name": "json",
                    "description": "",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SpriteSheetLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SpriteSheetLoader.js",
            "line": 154,
            "description": "An item from the {{#crossLink \"_manifestQueue:property\"}}{{/crossLink}} has completed.",
            "itemtype": "method",
            "name": "_handleManifestFileLoad",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SpriteSheetLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SpriteSheetLoader.js",
            "line": 169,
            "description": "The images have completed loading. This triggers the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}}\n{{#crossLink \"Event\"}}{{/crossLink}} from the SpriteSheetLoader.",
            "itemtype": "method",
            "name": "_handleManifestComplete",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SpriteSheetLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SpriteSheetLoader.js",
            "line": 182,
            "description": "The images {{#crossLink \"LoadQueue\"}}{{/crossLink}} has reported progress.",
            "itemtype": "method",
            "name": "_handleManifestProgress",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "ProgressEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SpriteSheetLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/SpriteSheetLoader.js",
            "line": 193,
            "description": "An image has reported an error.",
            "itemtype": "method",
            "name": "_handleManifestError",
            "params": [
                {
                    "name": "event",
                    "description": "",
                    "type": "ErrorEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SpriteSheetLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/TextLoader.js",
            "line": 56,
            "description": "Determines if the loader can load a specific item. This loader loads items that are of type {{#crossLink \"Types/TEXT:property\"}}{{/crossLink}},\nbut is also the default loader if a file type can not be determined.",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "TextLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/VideoLoader.js",
            "line": 65,
            "description": "Create a new video tag",
            "return": {
                "description": "",
                "type": "HTMLElement"
            },
            "access": "private",
            "tagname": "",
            "class": "VideoLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/VideoLoader.js",
            "line": 76,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/VIDEO:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "VideoLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/XMLLoader.js",
            "line": 59,
            "description": "Determines if the loader can load a specific item. This loader can only load items that are of type\n{{#crossLink \"Types/XML:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "canLoadItem",
            "params": [
                {
                    "name": "item",
                    "description": "The LoadItem that a LoadQueue is trying to load.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "Whether the loader can load the item.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "XMLLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/loaders/XMLLoader.js",
            "line": 72,
            "description": "The result formatter for XML files.",
            "itemtype": "method",
            "name": "_formatResult",
            "params": [
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                }
            ],
            "return": {
                "description": "",
                "type": "XMLDocument"
            },
            "access": "private",
            "tagname": "",
            "class": "XMLLoader",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/AbstractRequest.js",
            "line": 55,
            "description": "Begin a load.",
            "itemtype": "method",
            "name": "load",
            "class": "AbstractRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/AbstractRequest.js",
            "line": 61,
            "description": "Clean up a request.",
            "itemtype": "method",
            "name": "destroy",
            "class": "AbstractRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/AbstractRequest.js",
            "line": 67,
            "description": "Cancel an in-progress request.",
            "itemtype": "method",
            "name": "cancel",
            "class": "AbstractRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/MediaTagRequest.js",
            "line": 95,
            "description": "An XHR request has reported progress.",
            "itemtype": "method",
            "name": "_handleProgress",
            "params": [
                {
                    "name": "event",
                    "description": "The XHR progress event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "MediaTagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/TagRequest.js",
            "line": 52,
            "description": "The HTML tag instance that is used to load.",
            "itemtype": "property",
            "name": "_tag",
            "type": "{HTMLElement}",
            "access": "protected",
            "tagname": "",
            "class": "TagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/TagRequest.js",
            "line": 60,
            "description": "The tag attribute that specifies the source, such as \"src\", \"href\", etc.",
            "itemtype": "property",
            "name": "_tagSrcAttribute",
            "type": "{String}",
            "access": "protected",
            "tagname": "",
            "class": "TagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/TagRequest.js",
            "line": 68,
            "description": "A method closure used for handling the tag load event.",
            "itemtype": "property",
            "name": "_loadedHandler",
            "type": "{Function}",
            "access": "private",
            "tagname": "",
            "class": "TagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/TagRequest.js",
            "line": 76,
            "description": "Determines if the element was added to the DOM automatically by PreloadJS, so it can be cleaned up after.",
            "itemtype": "property",
            "name": "_addedToDOM",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "TagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/TagRequest.js",
            "line": 118,
            "description": "Handle the readyStateChange event from a tag. We need this in place of the `onload` callback (mainly SCRIPT\nand LINK tags), but other cases may exist.",
            "itemtype": "method",
            "name": "_handleReadyStateChange",
            "access": "private",
            "tagname": "",
            "class": "TagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/TagRequest.js",
            "line": 135,
            "description": "Handle any error events from the tag.",
            "itemtype": "method",
            "name": "_handleError",
            "access": "protected",
            "tagname": "",
            "class": "TagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/TagRequest.js",
            "line": 145,
            "description": "Handle the tag's onload callback.",
            "itemtype": "method",
            "name": "_handleTagComplete",
            "access": "private",
            "tagname": "",
            "class": "TagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/TagRequest.js",
            "line": 159,
            "description": "The tag request has not loaded within the time specified in loadTimeout.",
            "itemtype": "method",
            "name": "_handleError",
            "params": [
                {
                    "name": "event",
                    "description": "The XHR error event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "TagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/TagRequest.js",
            "line": 170,
            "description": "Remove event listeners, but don't destroy the request object",
            "itemtype": "method",
            "name": "_clean",
            "access": "private",
            "tagname": "",
            "class": "TagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/TagRequest.js",
            "line": 185,
            "description": "Handle a stalled audio event. The main place this happens is with HTMLAudio in Chrome when playing back audio\nthat is already in a load, but not complete.",
            "itemtype": "method",
            "name": "_handleStalled",
            "access": "private",
            "tagname": "",
            "class": "TagRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 57,
            "description": "A reference to the XHR request used to load the content.",
            "itemtype": "property",
            "name": "_request",
            "type": "{XMLHttpRequest | XDomainRequest | ActiveX.XMLHTTP}",
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 65,
            "description": "A manual load timeout that is used for browsers that do not support the onTimeout event on XHR (XHR level 1,\ntypically IE9).",
            "itemtype": "property",
            "name": "_loadTimeout",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 74,
            "description": "The browser's XHR (XMLHTTPRequest) version. Supported versions are 1 and 2. There is no official way to detect\nthe version, so we use capabilities to make a best guess.",
            "itemtype": "property",
            "name": "_xhrLevel",
            "type": "{Number}",
            "default": "1",
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 84,
            "description": "The response of a loaded file. This is set because it is expensive to look up constantly. This property will be\nnull until the file is loaded.",
            "itemtype": "property",
            "name": "_response",
            "type": "{mixed}",
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 93,
            "description": "The response of the loaded file before it is modified. In most cases, content is converted from raw text to\nan HTML tag or a formatted object which is set to the <code>result</code> property, but the developer may still\nwant to access the raw content as it was loaded.",
            "itemtype": "property",
            "name": "_rawResponse",
            "type": "{String|Object}",
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 122,
            "description": "A list of XMLHTTP object IDs to try when building an ActiveX object for XHR requests in earlier versions of IE.",
            "itemtype": "property",
            "name": "ACTIVEX_VERSIONS",
            "type": "{Array}",
            "since": "0.4.2",
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 139,
            "description": "Look up the loaded result.",
            "itemtype": "method",
            "name": "getResult",
            "params": [
                {
                    "name": "raw",
                    "description": "Return a raw result instead of a formatted result. This applies to content\nloaded via XHR such as scripts, XML, CSS, and Images. If there is no raw result, the formatted result will be\nreturned instead.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "A result object containing the content that was loaded, such as:\n<ul>\n     <li>An image tag (&lt;image /&gt;) for images</li>\n     <li>A script tag for JavaScript (&lt;script /&gt;). Note that scripts loaded with tags may be added to the\n     HTML head.</li>\n     <li>A style tag for CSS (&lt;style /&gt;)</li>\n     <li>Raw text for TEXT</li>\n     <li>A formatted JavaScript object defined by JSON</li>\n     <li>An XML document</li>\n     <li>An binary arraybuffer loaded by XHR</li>\n</ul>\nNote that if a raw result is requested, but not found, the result will be returned instead.",
                "type": "Object"
            },
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 229,
            "description": "Get all the response headers from the XmlHttpRequest.\n\n<strong>From the docs:</strong> Return all the HTTP headers, excluding headers that are a case-insensitive match\nfor Set-Cookie or Set-Cookie2, as a single string, with each header line separated by a U+000D CR U+000A LF pair,\nexcluding the status line, and with each header name and header value separated by a U+003A COLON U+0020 SPACE\npair.",
            "itemtype": "method",
            "name": "getAllResponseHeaders",
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.4.1",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 248,
            "description": "Get a specific response header from the XmlHttpRequest.\n\n<strong>From the docs:</strong> Returns the header field value from the response of which the field name matches\nheader, unless the field name is Set-Cookie or Set-Cookie2.",
            "itemtype": "method",
            "name": "getResponseHeader",
            "params": [
                {
                    "name": "header",
                    "description": "The header name to retrieve.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "since": "0.4.1",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 267,
            "description": "The XHR request has reported progress.",
            "itemtype": "method",
            "name": "_handleProgress",
            "params": [
                {
                    "name": "event",
                    "description": "The XHR progress event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 282,
            "description": "The XHR request has reported a load start.",
            "itemtype": "method",
            "name": "_handleLoadStart",
            "params": [
                {
                    "name": "event",
                    "description": "The XHR loadStart event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 293,
            "description": "The XHR request has reported an abort event.",
            "itemtype": "method",
            "name": "handleAbort",
            "params": [
                {
                    "name": "event",
                    "description": "The XHR abort event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 304,
            "description": "The XHR request has reported an error event.",
            "itemtype": "method",
            "name": "_handleError",
            "params": [
                {
                    "name": "event",
                    "description": "The XHR error event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 315,
            "description": "The XHR request has reported a readyState change. Note that older browsers (IE 7 & 8) do not provide an onload\nevent, so we must monitor the readyStateChange to determine if the file is loaded.",
            "itemtype": "method",
            "name": "_handleReadyStateChange",
            "params": [
                {
                    "name": "event",
                    "description": "The XHR readyStateChange event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 328,
            "description": "The XHR request has completed. This is called by the XHR request directly, or by a readyStateChange that has\n<code>request.readyState == 4</code>. Only the first call to this method will be processed.\n\nNote that This method uses {{#crossLink \"_checkError\"}}{{/crossLink}} to determine if the server has returned an\nerror code.",
            "itemtype": "method",
            "name": "_handleLoad",
            "params": [
                {
                    "name": "event",
                    "description": "The XHR load event.",
                    "type": "Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 371,
            "description": "The XHR request has timed out. This is called by the XHR request directly, or via a <code>setTimeout</code>\ncallback.",
            "itemtype": "method",
            "name": "_handleTimeout",
            "params": [
                {
                    "name": "event",
                    "description": "The XHR timeout event. This is occasionally null when called by the backup setTimeout.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 384,
            "description": "Determine if there is an error in the current load.\nCurrently this checks the status of the request for problem codes, and not actual response content:\n<ul>\n    <li>Status codes between 400 and 599 (HTTP error range)</li>\n    <li>A status of 0, but *only when the application is running on a server*. If the application is running\n    on `file:`, then it may incorrectly treat an error on local (or embedded applications) as a successful\n    load.</li>\n</ul>",
            "itemtype": "method",
            "name": "_checkError",
            "return": {
                "description": "An error with the status code in the `message` argument.",
                "type": "Error"
            },
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 410,
            "description": "Validate the response. Different browsers have different approaches, some of which throw errors when accessed\nin other browsers. If there is no response, the <code>_response</code> property will remain null.",
            "itemtype": "method",
            "name": "_getResponse",
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 444,
            "description": "Create an XHR request. Depending on a number of factors, we get totally different results.\n<ol><li>Some browsers get an <code>XDomainRequest</code> when loading cross-domain.</li>\n     <li>XMLHttpRequest are created when available.</li>\n     <li>ActiveX.XMLHTTP objects are used in older IE browsers.</li>\n     <li>Text requests override the mime type if possible</li>\n     <li>Origin headers are sent for crossdomain requests in some browsers.</li>\n     <li>Binary loads set the response type to \"arraybuffer\"</li></ol>",
            "itemtype": "method",
            "name": "_createXHR",
            "params": [
                {
                    "name": "item",
                    "description": "The requested item that is being loaded.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "If an XHR request or equivalent was successfully created.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/net/XHRRequest.js",
            "line": 539,
            "description": "A request has completed (or failed or canceled), and needs to be disposed.",
            "itemtype": "method",
            "name": "_clean",
            "access": "private",
            "tagname": "",
            "class": "XHRRequest",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/plugins/SamplePlugin.js",
            "line": 53,
            "description": "When a plugin is installed, this method will be called to let PreloadJS know when to invoke the plugin.\n\nPreloadJS expects this method to return an object containing:\n<ul>\n    <li><strong>callback:</strong> The function to call on the plugin class right before an item is loaded. Check\n    out the {{#crossLink \"SamplePlugin/preloadHandler\"}}{{/crossLink}} method for more information. The callback\n    is automatically called in the scope of the plugin.</li>\n    <li><strong>types:</strong> An array of recognized PreloadJS load types to handle. Supported load types are\n    \"binary\",\"image\", \"javascript\", \"json\", \"jsonp\", \"sound\", \"svg\", \"text\", and \"xml\".</li>\n    <li><strong>extensions:</strong> An array of strings containing file extensions to handle, such as \"jpg\",\n    \"mp3\", etc. This only fires if an applicable type handler is not found by the plugin.</li>\n</ul>\n\nNote that currently, PreloadJS only supports a single handler for each extension or file type.\n\n<h4>Example</h4>\n\n     // Check out the SamplePlugin source for a more complete example.\n     SamplePlugin.getPreloadHandlers = function() {\n         return {\n             callback: SamplePlugin.preloadHandler,\n             extensions: [\"jpg\", \"jpeg\", \"png\", \"gif\"]\n         }\n     }\n\nIf a plugin provides both \"type\" and \"extension\" handlers, the type handler will take priority, and will only\nfire once per file. For example if you have a handler for type=sound, and for extension=mp3, the callback will\nfire when it matches the type.",
            "itemtype": "method",
            "name": "getPreloadHandlers",
            "return": {
                "description": "An object defining a callback, type handlers, and extension handlers (see description)",
                "type": "Object"
            },
            "class": "SamplePlugin",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/plugins/SamplePlugin.js",
            "line": 94,
            "description": "This is a sample method to show how to handle the callback specified in the {{#crossLink \"LoadQueue/getPreloadHandlers\"}}{{/crossLink}}.\nRight before a file is loaded, if a plugin for the file type or extension is found, then the callback for that\nplugin will be invoked. This gives the plugin an opportunity to modify the load item, or even cancel the load.\nThe return value of the callback determines how PreloadJS will handle the file:\n<ul>\n    <li><strong>false:</strong> Skip the item. This allows plugins to determine if a file should be loaded or\n    not. For example,the plugin could determine if a file type is supported at all on the current system, and\n    skip those that do not.</li>\n    <li><strong>true:</strong> Continue normally. The plugin will not affect the load.</li>\n    <li><strong>AbstractLoader instance:</strong> Used as the loader for the content. This is new in 0.6.0.</li>\n</ul>\n\nSince the {{#crossLink \"LoadItem\"}}{{/crossLink}} is passed by reference, a plugin can modify as needed, even\nappending additional data to it. Note that if the {{#crossLink \"LoadItem/src:property\"}}{{/crossLink}} is\nmodified, PreloadJS will automatically update the {{#crossLink \"LoadItem/ext:property\"}}{{/crossLink}} property.\n\n<h4>Example</h4>\n\n     // Cancel a load\n     SamplePlugin.preloadHandler = function(loadItem, queue) {\n         if (loadItem.id.indexOf(\"thumb\") { return false; } // Don't load items like \"image-thumb.png\"\n         return true;\n     }\n\n     // Specify a completeHandler\n     SamplePlugin.preloadHandler = function(loadItem, queue) {\n         item.completeHandler = SamplePlugin.fileLoadHandler;\n     }\n\n     // Check out the SamplePlugin source to see another example.\n\n<em>Note: In 0.4.2 and earlier, instead of a {{#crossLink \"LoadItem\"}}{{/crossLink}}, arguments were passed in,\nand a modified object was returned to PreloadJS. This has been changed to passing a reference to the LoadItem,\nwhich can be directly modified.</em>",
            "itemtype": "method",
            "name": "preloadHandler",
            "params": [
                {
                    "name": "loadItem",
                    "description": "The item that PreloadJS is going to load. This item is passes by reference,\nso it can be directly modified.",
                    "type": "LoadItem|Object"
                },
                {
                    "name": "queue",
                    "description": "The {{#crossLink \"LoadQueue\"}}{{/crossLink}} instance that is preloading the item.",
                    "type": "LoadQueue"
                }
            ],
            "return": {
                "description": "How PreloadJS should handle the load. See the main description for more info.",
                "type": "Boolean|AbstractLoader"
            },
            "class": "SamplePlugin",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/plugins/SamplePlugin.js",
            "line": 156,
            "description": "This is a sample method to show a `completeHandler`, which is optionally specified by the return object in the\n{{#crossLink \"SamplePlugin/preloadHandler\"}}{{/crossLink}}. This sample provides a `completeHandler` to the\n{{#crossLink \"LoadItem\"}}{{/crossLink}}. This method is called after the item has completely loaded, but before\nthe {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event is dispatched from the {{#crossLink \"LoadQueue\"}}{{/crossLink}}.\n\nThe provided sample also listens for the {{#crossLink \"AbstractLoader/complete:event\"}}{{/crossLink}}\nevent on the loader it returns to show a different usage.",
            "itemtype": "method",
            "name": "fileLoadHandler",
            "params": [
                {
                    "name": "event",
                    "description": "A {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event.",
                    "type": "Event"
                }
            ],
            "class": "SamplePlugin",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/DataUtils.js",
            "line": 43,
            "description": "Parse XML using the DOM. This is required when preloading XML or SVG.",
            "itemtype": "method",
            "name": "parseXML",
            "params": [
                {
                    "name": "text",
                    "description": "The raw text or XML that is loaded by XHR.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An XML document",
                "type": "XML"
            },
            "static": 1,
            "class": "DataUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/DataUtils.js",
            "line": 78,
            "description": "Parse a string into an Object.",
            "itemtype": "method",
            "name": "parseJSON",
            "params": [
                {
                    "name": "value",
                    "description": "The loaded JSON string",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A JavaScript object.",
                "type": "Object"
            },
            "class": "DataUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/DomUtils.js",
            "line": 77,
            "description": "Check if item is a valid HTMLImageElement",
            "itemtype": "method",
            "name": "isImageTag",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "class": "DomUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/DomUtils.js",
            "line": 88,
            "description": "Check if item is a valid HTMLAudioElement",
            "itemtype": "method",
            "name": "isAudioTag",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "class": "DomUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/DomUtils.js",
            "line": 103,
            "description": "Check if item is a valid HTMLVideoElement",
            "itemtype": "method",
            "name": "isVideoTag",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "static": 1,
            "class": "DomUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/RequestUtils.js",
            "line": 42,
            "description": "Determine if a specific type should be loaded as a binary file. Currently, only images and items marked\nspecifically as \"binary\" are loaded as binary. Note that audio is <b>not</b> a binary type, as we can not play\nback using an audio tag if it is loaded as binary. Plugins can change the item type to binary to ensure they get\na binary result to work with. Binary files are loaded using XHR2. Types are defined as static constants on\n{{#crossLink \"AbstractLoader\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "isBinary",
            "params": [
                {
                    "name": "type",
                    "description": "The item type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the specified type is binary.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "RequestUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/RequestUtils.js",
            "line": 63,
            "description": "Determine if a specific type is a text-based asset, and should be loaded as UTF-8.",
            "itemtype": "method",
            "name": "isText",
            "params": [
                {
                    "name": "type",
                    "description": "The item type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "If the specified type is text.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "RequestUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/RequestUtils.js",
            "line": 86,
            "description": "Determine the type of the object using common extensions. Note that the type can be passed in with the load item\nif it is an unusual extension.",
            "itemtype": "method",
            "name": "getTypeByExtension",
            "params": [
                {
                    "name": "extension",
                    "description": "The file extension to use to determine the load type.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The determined load type (for example, `createjs.Types.IMAGE`). Will return `null` if\nthe type can not be determined by the extension.",
                "type": "String"
            },
            "static": 1,
            "class": "RequestUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/URLUtils.js",
            "line": 42,
            "description": "The Regular Expression used to test file URLS for an absolute path.",
            "itemtype": "property",
            "name": "ABSOLUTE_PATH",
            "type": "{RegExp}",
            "static": 1,
            "class": "URLUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/URLUtils.js",
            "line": 50,
            "description": "The Regular Expression used to test file URLS for a relative path.",
            "itemtype": "property",
            "name": "RELATIVE_PATH",
            "type": "{RegExp}",
            "static": 1,
            "class": "URLUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/URLUtils.js",
            "line": 58,
            "description": "The Regular Expression used to test file URLS for an extension. Note that URIs must already have the query string\nremoved.",
            "itemtype": "property",
            "name": "EXTENSION_PATT",
            "type": "{RegExp}",
            "static": 1,
            "class": "URLUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/URLUtils.js",
            "line": 67,
            "description": "Parse a file path to determine the information we need to work with it. Currently, PreloadJS needs to know:\n<ul>\n    <li>If the path is absolute. Absolute paths start with a protocol (such as `http://`, `file://`, or\n    `//networkPath`)</li>\n    <li>If the path is relative. Relative paths start with `../` or `/path` (or similar)</li>\n    <li>The file extension. This is determined by the filename with an extension. Query strings are dropped, and\n    the file path is expected to follow the format `name.ext`.</li>\n</ul>",
            "itemtype": "method",
            "name": "parseURI",
            "params": [
                {
                    "name": "path",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An Object with an `absolute` and `relative` Boolean values,\n\tthe pieces of the path (protocol, hostname, port, pathname, search, hash, host)\n\tas well as an optional 'extension` property, which is the lowercase extension.",
                "type": "Object"
            },
            "static": 1,
            "class": "URLUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/URLUtils.js",
            "line": 134,
            "description": "Formats an object into a query string for either a POST or GET request.",
            "itemtype": "method",
            "name": "formatQueryString",
            "params": [
                {
                    "name": "data",
                    "description": "The data to convert to a query string.",
                    "type": "Object"
                },
                {
                    "name": "query",
                    "description": "Existing name/value pairs to append on to this query.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "static": 1,
            "class": "URLUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/URLUtils.js",
            "line": 155,
            "description": "A utility method that builds a file path using a source and a data object, and formats it into a new path.",
            "itemtype": "method",
            "name": "buildURI",
            "params": [
                {
                    "name": "src",
                    "description": "The source path to add values to.",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "Object used to append values to this request as a query string. Existing parameters on the\npath will be preserved.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "A formatted string that contains the path and the supplied parameters.",
                "type": "String"
            },
            "static": 1,
            "class": "URLUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/URLUtils.js",
            "line": 184,
            "itemtype": "method",
            "name": "isCrossDomain",
            "params": [
                {
                    "name": "item",
                    "description": "A load item with a `src` property.",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "If the load item is loading from a different domain than the current location.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "URLUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/utils/URLUtils.js",
            "line": 204,
            "itemtype": "method",
            "name": "isLocal",
            "params": [
                {
                    "name": "item",
                    "description": "A load item with a `src` property",
                    "type": "LoadItem|Object"
                }
            ],
            "return": {
                "description": "If the load item is loading from the \"file:\" protocol. Assume that the host must be local as\nwell.",
                "type": "Boolean"
            },
            "static": 1,
            "class": "URLUtils",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 272,
            "description": "An array of the plugins registered using {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_plugins",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "since": "0.6.1",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 281,
            "description": "An object hash of callbacks that are fired for each file type before the file is loaded, giving plugins the\nability to override properties of the load. Please see the {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}}\nmethod for more information.",
            "itemtype": "property",
            "name": "_typeCallbacks",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 291,
            "description": "An object hash of callbacks that are fired for each file extension before the file is loaded, giving plugins the\nability to override properties of the load. Please see the {{#crossLink \"LoadQueue/installPlugin\"}}{{/crossLink}}\nmethod for more information.",
            "itemtype": "property",
            "name": "_extensionCallbacks",
            "type": "{null}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 301,
            "description": "The next preload queue to process when this one is complete. If an error is thrown in the current queue, and\n{{#crossLink \"LoadQueue/stopOnError:property\"}}{{/crossLink}} is `true`, the next queue will not be processed.",
            "itemtype": "property",
            "name": "next",
            "type": "{LoadQueue}",
            "default": "null",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 310,
            "description": "Ensure loaded scripts \"complete\" in the order they are specified. Loaded scripts are added to the document head\nonce they are loaded. Scripts loaded via tags will load one-at-a-time when this property is `true`, whereas\nscripts loaded using XHR can load in any order, but will \"finish\" and be added to the document in the order\nspecified.\n\nAny items can be set to load in order by setting the {{#crossLink \"maintainOrder:property\"}}{{/crossLink}}\nproperty on the load item, or by ensuring that only one connection can be open at a time using\n{{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}}. Note that when the `maintainScriptOrder` property\nis set to `true`, scripts items are automatically set to `maintainOrder=true`, and changing the\n`maintainScriptOrder` to `false` during a load will not change items already in a queue.\n\n<h4>Example</h4>\n\n     var queue = new createjs.LoadQueue();\n     queue.setMaxConnections(3); // Set a higher number to load multiple items at once\n     queue.maintainScriptOrder = true; // Ensure scripts are loaded in order\n     queue.loadManifest([\n         \"script1.js\",\n         \"script2.js\",\n         \"image.png\", // Load any time\n         {src: \"image2.png\", maintainOrder: true} // Will wait for script2.js\n         \"image3.png\",\n         \"script3.js\" // Will wait for image2.png before loading (or completing when loading with XHR)\n     ]);",
            "itemtype": "property",
            "name": "maintainScriptOrder",
            "type": "{Boolean}",
            "default": "true",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 342,
            "description": "Determines if the LoadQueue will stop processing the current queue when an error is encountered.",
            "itemtype": "property",
            "name": "stopOnError",
            "type": "{Boolean}",
            "default": "false",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 350,
            "description": "The number of maximum open connections that a loadQueue tries to maintain. Please see\n{{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}} for more information.",
            "itemtype": "property",
            "name": "_maxConnections",
            "type": "{Number}",
            "default": "1",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 360,
            "description": "An internal list of all the default Loaders that are included with PreloadJS. Before an item is loaded, the\navailable loader list is iterated, in the order they are included, and as soon as a loader indicates it can\nhandle the content, it will be selected. The default loader, ({{#crossLink \"TextLoader\"}}{{/crossLink}} is\nlast in the list, so it will be used if no other match is found. Typically, loaders will match based on the\n{{#crossLink \"LoadItem/type\"}}{{/crossLink}}, which is automatically determined using the file extension of\nthe {{#crossLink \"LoadItem/src:property\"}}{{/crossLink}}.\n\nLoaders can be removed from PreloadJS by simply not including them.\n\nCustom loaders installed using {{#crossLink \"registerLoader\"}}{{/crossLink}} will be prepended to this list\nso that they are checked first.",
            "itemtype": "property",
            "name": "_availableLoaders",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "since": "0.6.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 394,
            "description": "The number of built in loaders, so they can't be removed by {{#crossLink \"unregisterLoader\"}}{{/crossLink}.",
            "itemtype": "property",
            "name": "_defaultLoaderLength",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "since": "0.6.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 433,
            "description": "An internal initialization method, which is used for initial set up, but also to reset the LoadQueue.",
            "itemtype": "method",
            "name": "init",
            "params": [
                {
                    "name": "preferXHR",
                    "description": ""
                },
                {
                    "name": "basePath",
                    "description": ""
                },
                {
                    "name": "crossOrigin",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 445,
            "description": "Try and use XMLHttpRequest (XHR) when possible. Note that LoadQueue will default to tag loading or XHR\nloading depending on the requirements for a media type. For example, HTML audio can not be loaded with XHR,\nand plain text can not be loaded with tags, so it will default the the correct type instead of using the\nuser-defined type.",
            "type": "{Boolean}",
            "default": "true",
            "since": "0.6.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 459,
            "description": "Whether the queue is currently paused or not.",
            "itemtype": "property",
            "name": "_paused",
            "type": "{boolean}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 467,
            "description": "A path that will be prepended on to the item's {{#crossLink \"LoadItem/src:property\"}}{{/crossLink}}. The\n`_basePath` property will only be used if an item's source is relative, and does not include a protocol such\nas `http://`, or a relative path such as `../`.",
            "itemtype": "property",
            "name": "_basePath",
            "type": "{String}",
            "access": "private",
            "tagname": "",
            "since": "0.3.1",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 478,
            "description": "An optional flag to set on images that are loaded using PreloadJS, which enables CORS support. Images loaded\ncross-domain by servers that support CORS require the crossOrigin flag to be loaded and interacted with by\na canvas. When loading locally, or with a server with no CORS support, this flag can cause other security issues,\nso it is recommended to only set it if you are sure the server supports it. Currently, supported values are \"\"\nand \"Anonymous\".",
            "itemtype": "property",
            "name": "_crossOrigin",
            "type": "{String}",
            "default": "\"\"",
            "access": "private",
            "tagname": "",
            "since": "0.4.1",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 492,
            "description": "Determines if the loadStart event was dispatched already. This event is only fired one time, when the first\nfile is requested.",
            "itemtype": "property",
            "name": "_loadStartWasDispatched",
            "type": "{Boolean}",
            "default": "false",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 502,
            "description": "Determines if there is currently a script loading. This helps ensure that only a single script loads at once when\nusing a script tag to do preloading.",
            "itemtype": "property",
            "name": "_currentlyLoadingScript",
            "type": "{Boolean}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 511,
            "description": "An array containing the currently downloading files.",
            "itemtype": "property",
            "name": "_currentLoads",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 519,
            "description": "An array containing the queued items that have not yet started downloading.",
            "itemtype": "property",
            "name": "_loadQueue",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 527,
            "description": "An array containing downloads that have not completed, so that the LoadQueue can be properly reset.",
            "itemtype": "property",
            "name": "_loadQueueBackup",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 535,
            "description": "An object hash of items that have finished downloading, indexed by the {{#crossLink \"LoadItem\"}}{{/crossLink}}\nid.",
            "itemtype": "property",
            "name": "_loadItemsById",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 544,
            "description": "An object hash of items that have finished downloading, indexed by {{#crossLink \"LoadItem\"}}{{/crossLink}}\nsource.",
            "itemtype": "property",
            "name": "_loadItemsBySrc",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 553,
            "description": "An object hash of loaded items, indexed by the ID of the {{#crossLink \"LoadItem\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_loadedResults",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 561,
            "description": "An object hash of un-parsed loaded items, indexed by the ID of the {{#crossLink \"LoadItem\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_loadedRawResults",
            "type": "{Object}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 569,
            "description": "The number of items that have been requested. This helps manage an overall progress without knowing how large\nthe files are before they are downloaded. This does not include items inside of loaders such as the\n{{#crossLink \"ManifestLoader\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "_numItems",
            "type": "{Number}",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 580,
            "description": "The number of items that have completed loaded. This helps manage an overall progress without knowing how large\nthe files are before they are downloaded.",
            "itemtype": "property",
            "name": "_numItemsLoaded",
            "type": "{Number}",
            "default": "0",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 590,
            "description": "A list of scripts in the order they were requested. This helps ensure that scripts are \"completed\" in the right\norder.",
            "itemtype": "property",
            "name": "_scriptOrder",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 599,
            "description": "A list of scripts that have been loaded. Items are added to this list as <code>null</code> when they are\nrequested, contain the loaded item if it has completed, but not been dispatched to the user, and <code>true</true>\nonce they are complete and have been dispatched.",
            "itemtype": "property",
            "name": "_loadedScripts",
            "type": "{Array}",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 609,
            "description": "The last progress amount. This is used to suppress duplicate progress events.",
            "itemtype": "property",
            "name": "_lastProgress",
            "type": "{Number}",
            "access": "private",
            "tagname": "",
            "since": "0.6.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 623,
            "description": "This event is fired when an individual file has loaded, and been processed.",
            "itemtype": "event",
            "name": "fileload",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The file item which was specified in the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\nor {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}} call. If only a string path or tag was specified, the\nobject will contain that value as a `src` property.",
                    "type": "Object"
                },
                {
                    "name": "result",
                    "description": "The HTML tag or parsed result of the loaded item.",
                    "type": "Object"
                },
                {
                    "name": "rawResult",
                    "description": "The unprocessed result, usually the raw text or binary data before it is converted\nto a usable object.",
                    "type": "Object"
                }
            ],
            "since": "0.3.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 637,
            "description": "This {{#crossLink \"ProgressEvent\"}}{{/crossLink}} that is fired when an an individual file's progress changes.",
            "itemtype": "event",
            "name": "fileprogress",
            "since": "0.3.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 643,
            "description": "This event is fired when an individual file starts to load.",
            "itemtype": "event",
            "name": "filestart",
            "params": [
                {
                    "name": "target",
                    "description": "The object that dispatched the event.",
                    "type": "Object"
                },
                {
                    "name": "type",
                    "description": "The event type.",
                    "type": "String"
                },
                {
                    "name": "item",
                    "description": "The file item which was specified in the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\nor {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}} call. If only a string path or tag was specified, the\nobject will contain that value as a property.",
                    "type": "Object"
                }
            ],
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 653,
            "description": "Although it extends {{#crossLink \"AbstractLoader\"}}{{/crossLink}}, the `initialize` event is never fired from\na LoadQueue instance.",
            "itemtype": "event",
            "name": "initialize",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 661,
            "description": "Register a custom loaders class. New loaders are given precedence over loaders added earlier and default loaders.\nIt is recommended that loaders extend {{#crossLink \"AbstractLoader\"}}{{/crossLink}}. Loaders can only be added\nonce, and will be prepended to the list of available loaders.",
            "itemtype": "method",
            "name": "registerLoader",
            "params": [
                {
                    "name": "loader",
                    "description": "The AbstractLoader class to add.",
                    "type": "Function|AbstractLoader"
                }
            ],
            "since": "0.6.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 679,
            "description": "Remove a custom loader added using {{#crossLink \"registerLoader\"}}{{/crossLink}}. Only custom loaders can be\nunregistered, the default loaders will always be available.",
            "itemtype": "method",
            "name": "unregisterLoader",
            "params": [
                {
                    "name": "loader",
                    "description": "The AbstractLoader class to remove",
                    "type": "Function|AbstractLoader"
                }
            ],
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 692,
            "description": "Change the {{#crossLink \"preferXHR:property\"}}{{/crossLink}} value. Note that if this is set to `true`, it may\nfail, or be ignored depending on the browser's capabilities and the load type.",
            "itemtype": "method",
            "name": "setPreferXHR",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "The value of {{#crossLink \"preferXHR\"}}{{/crossLink}} that was successfully set.",
                "type": "Boolean"
            },
            "since": "0.6.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 707,
            "description": "Stops all queued and loading items, and clears the queue. This also removes all internal references to loaded\ncontent, and allows the queue to be used again.",
            "itemtype": "method",
            "name": "removeAll",
            "since": "0.3.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 717,
            "description": "Stops an item from being loaded, and removes it from the queue. If nothing is passed, all items are removed.\nThis also removes internal references to loaded item(s).\n\n<h4>Example</h4>\n\n     queue.loadManifest([\n         {src:\"test.png\", id:\"png\"},\n         {src:\"test.jpg\", id:\"jpg\"},\n         {src:\"test.mp3\", id:\"mp3\"}\n     ]);\n     queue.remove(\"png\"); // Single item by ID\n     queue.remove(\"png\", \"test.jpg\"); // Items as arguments. Mixed id and src.\n     queue.remove([\"test.png\", \"jpg\"]); // Items in an Array. Mixed id and src.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "idsOrUrls",
                    "description": "The id or ids to remove from this queue. You can pass an item, an array of\nitems, or multiple items as arguments.",
                    "type": "String | Array",
                    "multiple": true
                }
            ],
            "since": "0.3.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 803,
            "description": "Stops all open loads, destroys any loaded items, and resets the queue, so all items can\nbe reloaded again by calling {{#crossLink \"AbstractLoader/load\"}}{{/crossLink}}. Items are not removed from the\nqueue. To remove items use the {{#crossLink \"LoadQueue/remove\"}}{{/crossLink}} or\n{{#crossLink \"LoadQueue/removeAll\"}}{{/crossLink}} method.",
            "itemtype": "method",
            "name": "reset",
            "since": "0.3.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 826,
            "description": "Register a plugin. Plugins can map to load types (sound, image, etc), or specific extensions (png, mp3, etc).\nCurrently, only one plugin can exist per type/extension.\n\nWhen a plugin is installed, a <code>getPreloadHandlers()</code> method will be called on it. For more information\non this method, check out the {{#crossLink \"SamplePlugin/getPreloadHandlers\"}}{{/crossLink}} method in the\n{{#crossLink \"SamplePlugin\"}}{{/crossLink}} class.\n\nBefore a file is loaded, a matching plugin has an opportunity to modify the load. If a `callback` is returned\nfrom the {{#crossLink \"SamplePlugin/getPreloadHandlers\"}}{{/crossLink}} method, it will be invoked first, and its\nresult may cancel or modify the item. The callback method can also return a `completeHandler` to be fired when\nthe file is loaded, or a `tag` object, which will manage the actual download. For more information on these\nmethods, check out the {{#crossLink \"SamplePlugin/preloadHandler\"}}{{/crossLink}} and {{#crossLink \"SamplePlugin/fileLoadHandler\"}}{{/crossLink}}\nmethods on the {{#crossLink \"SamplePlugin\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "installPlugin",
            "params": [
                {
                    "name": "plugin",
                    "description": "The plugin class to install.",
                    "type": "Function"
                }
            ],
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 868,
            "description": "Set the maximum number of concurrent connections. Note that browsers and servers may have a built-in maximum\nnumber of open connections, so any additional connections may remain in a pending state until the browser\nopens the connection. When loading scripts using tags, and when {{#crossLink \"LoadQueue/maintainScriptOrder:property\"}}{{/crossLink}}\nis `true`, only one script is loaded at a time due to browser limitations.\n\n<h4>Example</h4>\n\n     var queue = new createjs.LoadQueue();\n     queue.setMaxConnections(10); // Allow 10 concurrent loads",
            "itemtype": "method",
            "name": "setMaxConnections",
            "params": [
                {
                    "name": "value",
                    "description": "The number of concurrent loads to allow. By default, only a single connection per LoadQueue\nis open at any time.",
                    "type": "Number"
                }
            ],
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 890,
            "description": "Load a single file. To add multiple files at once, use the {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}\nmethod.\n\nFiles are always appended to the current queue, so this method can be used multiple times to add files.\nTo clear the queue first, use the {{#crossLink \"AbstractLoader/close\"}}{{/crossLink}} method.",
            "itemtype": "method",
            "name": "loadFile",
            "params": [
                {
                    "name": "file",
                    "description": "The file object or path to load. A file can be either\n<ul>\n    <li>A {{#crossLink \"LoadItem\"}}{{/crossLink}} instance</li>\n    <li>An object containing properties defined by {{#crossLink \"LoadItem\"}}{{/crossLink}}</li>\n    <li>OR A string path to a resource. Note that this kind of load item will be converted to a {{#crossLink \"LoadItem\"}}{{/crossLink}}\n    in the background.</li>\n</ul>",
                    "type": "LoadItem|Object|String"
                },
                {
                    "name": "loadNow",
                    "description": "Kick off an immediate load (true) or wait for a load call (false). The default\nvalue is true. If the queue is paused using {{#crossLink \"LoadQueue/setPaused\"}}{{/crossLink}}, and the value is\n`true`, the queue will resume automatically.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "basePath",
                    "description": "A base path that will be prepended to each file. The basePath argument overrides the\npath specified in the constructor. Note that if you load a manifest using a file of type {{#crossLink \"Types/MANIFEST:property\"}}{{/crossLink}},\nits files will <strong>NOT</strong> use the basePath parameter. <strong>The basePath parameter is deprecated.</strong>\nThis parameter will be removed in a future version. Please either use the `basePath` parameter in the LoadQueue\nconstructor, or a `path` property in a manifest definition.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 928,
            "description": "Load an array of files. To load a single file, use the {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} method.\nThe files in the manifest are requested in the same order, but may complete in a different order if the max\nconnections are set above 1 using {{#crossLink \"LoadQueue/setMaxConnections\"}}{{/crossLink}}. Scripts will load\nin the right order as long as {{#crossLink \"LoadQueue/maintainScriptOrder\"}}{{/crossLink}} is true (which is\ndefault).\n\nFiles are always appended to the current queue, so this method can be used multiple times to add files.\nTo clear the queue first, use the {{#crossLink \"AbstractLoader/close\"}}{{/crossLink}} method.",
            "itemtype": "method",
            "name": "loadManifest",
            "params": [
                {
                    "name": "manifest",
                    "description": "An list of files to load. The loadManifest call supports four types of\nmanifests:\n<ol>\n    <li>A string path, which points to a manifest file, which is a JSON file that contains a \"manifest\" property,\n    which defines the list of files to load, and can optionally contain a \"path\" property, which will be\n    prepended to each file in the list.</li>\n    <li>An object which defines a \"src\", which is a JSON or JSONP file. A \"callback\" can be defined for JSONP\n    file. The JSON/JSONP file should contain a \"manifest\" property, which defines the list of files to load,\n    and can optionally contain a \"path\" property, which will be prepended to each file in the list.</li>\n    <li>An object which contains a \"manifest\" property, which defines the list of files to load, and can\n    optionally contain a \"path\" property, which will be prepended to each file in the list.</li>\n    <li>An Array of files to load.</li>\n</ol>\n\nEach \"file\" in a manifest can be either:\n<ul>\n    <li>A {{#crossLink \"LoadItem\"}}{{/crossLink}} instance</li>\n    <li>An object containing properties defined by {{#crossLink \"LoadItem\"}}{{/crossLink}}</li>\n    <li>OR A string path to a resource. Note that this kind of load item will be converted to a {{#crossLink \"LoadItem\"}}{{/crossLink}}\n    in the background.</li>\n</ul>",
                    "type": "Array|String|Object"
                },
                {
                    "name": "loadNow",
                    "description": "Kick off an immediate load (true) or wait for a load call (false). The default\nvalue is true. If the queue is paused using {{#crossLink \"LoadQueue/setPaused\"}}{{/crossLink}} and this value is\n`true`, the queue will resume automatically.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "basePath",
                    "description": "A base path that will be prepended to each file. The basePath argument overrides the\npath specified in the constructor. Note that if you load a manifest using a file of type {{#crossLink \"LoadQueue/MANIFEST:property\"}}{{/crossLink}},\nits files will <strong>NOT</strong> use the basePath parameter. <strong>The basePath parameter is deprecated.</strong>\nThis parameter will be removed in a future version. Please either use the `basePath` parameter in the LoadQueue\nconstructor, or a `path` property in a manifest definition.",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1028,
            "description": "Start a LoadQueue that was created, but not automatically started.",
            "itemtype": "method",
            "name": "load",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1036,
            "description": "Look up a {{#crossLink \"LoadItem\"}}{{/crossLink}} using either the \"id\" or \"src\" that was specified when loading it. Note that if no \"id\" was\nsupplied with the load item, the ID will be the \"src\", including a `path` property defined by a manifest. The\n`basePath` will not be part of the ID.",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "value",
                    "description": "The <code>id</code> or <code>src</code> of the load item.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The load item that was initially requested using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}}\nor {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}. This object is also returned via the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}}\nevent as the `item` parameter.",
                "type": "Object"
            },
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1050,
            "description": "Look up a loaded result using either the \"id\" or \"src\" that was specified when loading it. Note that if no \"id\"\nwas supplied with the load item, the ID will be the \"src\", including a `path` property defined by a manifest. The\n`basePath` will not be part of the ID.",
            "itemtype": "method",
            "name": "getResult",
            "params": [
                {
                    "name": "value",
                    "description": "The <code>id</code> or <code>src</code> of the load item.",
                    "type": "String"
                },
                {
                    "name": "rawResult",
                    "description": "Return a raw result instead of a formatted result. This applies to content\nloaded via XHR such as scripts, XML, CSS, and Images. If there is no raw result, the formatted result will be\nreturned instead.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "return": {
                "description": "A result object containing the content that was loaded, such as:\n<ul>\n     <li>An image tag (&lt;image /&gt;) for images</li>\n     <li>A script tag for JavaScript (&lt;script /&gt;). Note that scripts are automatically added to the HTML\n     DOM.</li>\n     <li>A style tag for CSS (&lt;style /&gt; or &lt;link &gt;)</li>\n     <li>Raw text for TEXT</li>\n     <li>A formatted JavaScript object defined by JSON</li>\n     <li>An XML document</li>\n     <li>A binary arraybuffer loaded by XHR</li>\n     <li>An audio tag (&lt;audio &gt;) for HTML audio. Note that it is recommended to use SoundJS APIs to play\n     loaded audio. Specifically, audio loaded by Flash and WebAudio will return a loader object using this method\n     which can not be used to play audio back.</li>\n</ul>\nThis object is also returned via the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event as the 'item`\nparameter. Note that if a raw result is requested, but not found, the result will be returned instead.",
                "type": "Object"
            },
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1088,
            "description": "Generate an list of items loaded by this queue.",
            "itemtype": "method",
            "name": "getItems",
            "params": [
                {
                    "name": "loaded",
                    "description": "Determines if only items that have been loaded should be returned. If false, in-progress\nand failed load items will also be included.",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "A list of objects that have been loaded. Each item includes the {{#crossLink \"LoadItem\"}}{{/crossLink}},\nresult, and rawResult.",
                "type": "Array"
            },
            "since": "0.6.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1114,
            "description": "Pause or resume the current load. Active loads will not be cancelled, but the next items in the queue will not\nbe processed when active loads complete. LoadQueues are not paused by default.\n\nNote that if new items are added to the queue using {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} or\n{{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}, a paused queue will be resumed, unless the `loadNow`\nargument is `false`.",
            "itemtype": "method",
            "name": "setPaused",
            "params": [
                {
                    "name": "value",
                    "description": "Whether the queue should be paused or not.",
                    "type": "Boolean"
                }
            ],
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1131,
            "description": "Close the active queue. Closing a queue completely empties the queue, and prevents any remaining items from\nstarting to download. Note that currently any active loads will remain open, and events may be processed.\n\nTo stop and restart a queue, use the {{#crossLink \"LoadQueue/setPaused\"}}{{/crossLink}} method instead.",
            "itemtype": "method",
            "name": "close",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1150,
            "description": "Add an item to the queue. Items are formatted into a usable object containing all the properties necessary to\nload the content. The load queue is populated with the loader instance that handles preloading, and not the load\nitem that was passed in by the user. To look up the load item by id or src, use the {{#crossLink \"LoadQueue.getItem\"}}{{/crossLink}}\nmethod.",
            "itemtype": "method",
            "name": "_addItem",
            "params": [
                {
                    "name": "value",
                    "description": "The item to add to the queue.",
                    "type": "String|Object"
                },
                {
                    "name": "path",
                    "description": "An optional path prepended to the `src`. The path will only be prepended if the src is\nrelative, and does not start with a protocol such as `http://`, or a path like `../`. If the LoadQueue was\nprovided a {{#crossLink \"_basePath\"}}{{/crossLink}}, then it will optionally be prepended after.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "basePath",
                    "description": "<strong>Deprecated</strong>An optional basePath passed into a {{#crossLink \"LoadQueue/loadManifest\"}}{{/crossLink}}\nor {{#crossLink \"LoadQueue/loadFile\"}}{{/crossLink}} call. This parameter will be removed in a future tagged\nversion.",
                    "type": "String",
                    "optional": true
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1194,
            "description": "Create a refined {{#crossLink \"LoadItem\"}}{{/crossLink}}, which contains all the required properties. The type of\nitem is determined by browser support, requirements based on the file type, and developer settings. For example,\nXHR is only used for file types that support it in new browsers.\n\nBefore the item is returned, any plugins registered to handle the type or extension will be fired, which may\nalter the load item.",
            "itemtype": "method",
            "name": "_createLoadItem",
            "params": [
                {
                    "name": "value",
                    "description": "The item that needs to be preloaded.",
                    "type": "String | Object | HTMLAudioElement | HTMLImageElement"
                },
                {
                    "name": "path",
                    "description": "A path to prepend to the item's source. Sources beginning with http:// or similar will\nnot receive a path. Since PreloadJS 0.4.1, the src will be modified to include the `path` and {{#crossLink \"LoadQueue/_basePath:property\"}}{{/crossLink}}\nwhen it is added.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "basePath",
                    "description": "<strong>Deprectated</strong> A base path to prepend to the items source in addition to\nthe path argument.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The loader instance that will be used.",
                "type": "Object"
            },
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1305,
            "description": "Create a loader for a load item.",
            "itemtype": "method",
            "name": "_createLoader",
            "params": [
                {
                    "name": "item",
                    "description": "A formatted load item that can be used to generate a loader.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A loader that can be used to load content.",
                "type": "AbstractLoader"
            },
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1331,
            "description": "Load the next item in the queue. If the queue is empty (all items have been loaded), then the complete event\nis processed. The queue will \"fill up\" any empty slots, up to the max connection specified using\n{{#crossLink \"LoadQueue.setMaxConnections\"}}{{/crossLink}} method. The only exception is scripts that are loaded\nusing tags, which have to be loaded one at a time to maintain load order.",
            "itemtype": "method",
            "name": "_loadNext",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1381,
            "description": "Begin loading an item. Event listeners are not added to the loaders until the load starts.",
            "itemtype": "method",
            "name": "_loadItem",
            "params": [
                {
                    "name": "loader",
                    "description": "The loader instance to start. Currently, this will be an XHRLoader or TagLoader.",
                    "type": "AbstractLoader"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1398,
            "description": "The callback that is fired when a loader loads a file. This enables loaders like {{#crossLink \"ManifestLoader\"}}{{/crossLink}}\nto maintain internal queues, but for this queue to dispatch the {{#crossLink \"fileload:event\"}}{{/crossLink}}\nevents.",
            "params": [
                {
                    "name": "event",
                    "description": "The {{#crossLink \"AbstractLoader/fileload:event\"}}{{/crossLink}} event from the loader.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "since": "0.6.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1411,
            "description": "The callback that is fired when a loader encounters an error from an internal file load operation. This enables\nloaders like M",
            "params": [
                {
                    "name": "event",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1422,
            "description": "The callback that is fired when a loader encounters an error. The queue will continue loading unless {{#crossLink \"LoadQueue/stopOnError:property\"}}{{/crossLink}}\nis set to `true`.",
            "itemtype": "method",
            "name": "_handleError",
            "params": [
                {
                    "name": "event",
                    "description": "The error event, containing relevant error information.",
                    "type": "ErrorEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1450,
            "description": "An item has finished loading. We can assume that it is totally loaded, has been parsed for immediate use, and\nis available as the \"result\" property on the load item. The raw text result for a parsed item (such as JSON, XML,\nCSS, JavaScript, etc) is available as the \"rawResult\" property, and can also be looked up using {{#crossLink \"LoadQueue/getResult\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "_handleFileComplete",
            "params": [
                {
                    "name": "event",
                    "description": "The event object from the loader.",
                    "type": "Event"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1483,
            "description": "Some loaders might load additional content, other than the item they were passed (such as {{#crossLink \"ManifestLoader\"}}{{/crossLink}}).\nAny items exposed by the loader using {{#crossLink \"AbstractLoader/getLoadItems\"}}{{/crossLink}} are added to the\nLoadQueue's look-ups, including {{#crossLink \"getItem\"}}{{/crossLink}} and {{#crossLink \"getResult\"}}{{/crossLink}}\nmethods.",
            "itemtype": "method",
            "name": "_saveLoadedItems",
            "params": [
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                }
            ],
            "access": "protected",
            "tagname": "",
            "since": "0.6.0",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1514,
            "description": "Flag an item as finished. If the item's order is being managed, then ensure that it is allowed to finish, and if\nso, trigger prior items to trigger as well.",
            "itemtype": "method",
            "name": "_finishOrderedItem",
            "params": [
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                },
                {
                    "name": "loadFailed",
                    "description": "",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "If the item's order is being managed. This allows the caller to take an alternate\nbehaviour if it is.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1548,
            "description": "Ensure the scripts load and dispatch in the correct order. When using XHR, scripts are stored in an array in the\norder they were added, but with a \"null\" value. When they are completed, the value is set to the load item,\nand then when they are processed and dispatched, the value is set to `true`. This method simply\niterates the array, and ensures that any loaded items that are not preceded by a `null` value are\ndispatched.",
            "itemtype": "method",
            "name": "_checkScriptLoadOrder",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1581,
            "description": "A file has completed loading, and the LoadQueue can move on. This triggers the complete event, and kick-starts\nthe next item.",
            "itemtype": "method",
            "name": "_processFinishedLoad",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "LoadItem|Object"
                },
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1604,
            "description": "Ensure items with `maintainOrder=true` that are before the specified item have loaded. This only applies to\nJavaScript items that are being loaded with a TagLoader, since they have to be loaded and completed <strong>before</strong>\nthe script can even be started, since it exist in the DOM while loading.",
            "itemtype": "method",
            "name": "_canStartLoad",
            "params": [
                {
                    "name": "loader",
                    "description": "The loader for the item",
                    "type": "AbstractLoader"
                }
            ],
            "return": {
                "description": "Whether the item can start a load or not.",
                "type": "Boolean"
            },
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1638,
            "description": "A load item is completed or was canceled, and needs to be removed from the LoadQueue.",
            "itemtype": "method",
            "name": "_removeLoadItem",
            "params": [
                {
                    "name": "loader",
                    "description": "A loader instance to remove.",
                    "type": "AbstractLoader"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1654,
            "description": "Remove unneeded references from a loader.",
            "params": [
                {
                    "name": "loader",
                    "description": ""
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1667,
            "description": "An item has dispatched progress. Propagate that progress, and update the LoadQueue's overall progress.",
            "itemtype": "method",
            "name": "_handleProgress",
            "params": [
                {
                    "name": "event",
                    "description": "The progress event from the item.",
                    "type": "ProgressEvent"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1679,
            "description": "Overall progress has changed, so determine the new progress amount and dispatch it. This changes any time an\nitem dispatches progress or completes. Note that since we don't always know the actual filesize of items before\nthey are loaded. In this case, we define a \"slot\" for each item (1 item in 10 would get 10%), and then append\nloaded progress on top of the already-loaded items.\n\nFor example, if 5/10 items have loaded, and item 6 is 20% loaded, the total progress would be:\n<ul>\n     <li>5/10 of the items in the queue (50%)</li>\n     <li>plus 20% of item 6's slot (2%)</li>\n     <li>equals 52%</li>\n</ul>",
            "itemtype": "method",
            "name": "_updateProgress",
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1711,
            "description": "Clean out item results, to free them from memory. Mainly, the loaded item and results are cleared from internal\nhashes.",
            "itemtype": "method",
            "name": "_disposeItem",
            "params": [
                {
                    "name": "item",
                    "description": "The item that was passed in for preloading.",
                    "type": "LoadItem|Object"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1725,
            "description": "Dispatch a \"fileprogress\" {{#crossLink \"Event\"}}{{/crossLink}}. Please see the LoadQueue {{#crossLink \"LoadQueue/fileprogress:event\"}}{{/crossLink}}\nevent for details on the event payload.",
            "itemtype": "method",
            "name": "_sendFileProgress",
            "params": [
                {
                    "name": "item",
                    "description": "The item that is being loaded.",
                    "type": "LoadItem|Object"
                },
                {
                    "name": "progress",
                    "description": "The amount the item has been loaded (between 0 and 1).",
                    "type": "Number"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1751,
            "description": "Dispatch a fileload {{#crossLink \"Event\"}}{{/crossLink}}. Please see the {{#crossLink \"LoadQueue/fileload:event\"}}{{/crossLink}} event for\ndetails on the event payload.",
            "itemtype": "method",
            "name": "_sendFileComplete",
            "params": [
                {
                    "name": "item",
                    "description": "The item that is being loaded.",
                    "type": "LoadItemObject"
                },
                {
                    "name": "loader",
                    "description": "",
                    "type": "AbstractLoader"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/LoadQueue.js",
            "line": 1778,
            "description": "Dispatch a filestart {{#crossLink \"Event\"}}{{/crossLink}} immediately before a file starts to load. Please see\nthe {{#crossLink \"LoadQueue/filestart:event\"}}{{/crossLink}} event for details on the event payload.",
            "itemtype": "method",
            "name": "_sendFileStart",
            "params": [
                {
                    "name": "item",
                    "description": "The item that is being loaded.",
                    "type": "LoadItem|Object"
                }
            ],
            "access": "protected",
            "tagname": "",
            "class": "LoadQueue",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/version.js",
            "line": 12,
            "description": "The version string for this release.",
            "itemtype": "property",
            "name": "version",
            "type": "{String}",
            "static": 1,
            "class": "PreloadJS",
            "module": "PreloadJS"
        },
        {
            "file": "preloadjs/version.js",
            "line": 20,
            "description": "The build date for this release in UTC format.",
            "itemtype": "property",
            "name": "buildDate",
            "type": "{String}",
            "static": 1,
            "class": "PreloadJS",
            "module": "PreloadJS"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/data/LoadItem.js:181"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/AbstractMediaLoader.js:110"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/BinaryLoader.js:57"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/CSSLoader.js:72"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/CSSLoader.js:85"
        },
        {
            "message": "unknown tag: oroperty",
            "line": " preloadjs/loaders/FontLoader.js:64"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/FontLoader.js:110"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/FontLoader.js:270"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/FontLoader.js:510"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/FontLoader.js:528"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/FontLoader.js:544"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/FontLoader.js:559"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/ImageLoader.js:76"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/ImageLoader.js:120"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/JSONLoader.js:61"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/JSONLoader.js:74"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/JSONPLoader.js:94"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/JavaScriptLoader.js:64"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/JavaScriptLoader.js:77"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/ManifestLoader.js:112"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/SVGLoader.js:70"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/SVGLoader.js:83"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/SoundLoader.js:73"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/SpriteSheetLoader.js:91"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/TextLoader.js:56"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/VideoLoader.js:65"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/VideoLoader.js:76"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/XMLLoader.js:59"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/loaders/XMLLoader.js:72"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/utils/DataUtils.js:78"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/utils/DomUtils.js:77"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/utils/DomUtils.js:88"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/utils/DomUtils.js:103"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/utils/URLUtils.js:67"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/utils/URLUtils.js:155"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/LoadQueue.js:692"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " preloadjs/LoadQueue.js:1088"
        },
        {
            "message": "Missing item type\nThe attribute the items loaded using tags use for the source.",
            "line": " preloadjs/loaders/AbstractLoader.js:177"
        },
        {
            "message": "Missing item type\nA list of font faces currently being \"watched\". Watched fonts will be tested on a regular interval, and be\nremoved from this list when they are complete.",
            "line": " preloadjs/loaders/FontLoader.js:64"
        },
        {
            "message": "Missing item type\nCreate a new video tag",
            "line": " preloadjs/loaders/VideoLoader.js:65"
        },
        {
            "message": "Missing item type\nTry and use XMLHttpRequest (XHR) when possible. Note that LoadQueue will default to tag loading or XHR\nloading depending on the requirements for a media type. For example, HTML audio can not be loaded with XHR,\nand plain text can not be loaded with tags, so it will default the the correct type instead of using the\nuser-defined type.",
            "line": " preloadjs/LoadQueue.js:445"
        },
        {
            "message": "Missing item type\nThe callback that is fired when a loader loads a file. This enables loaders like {{#crossLink \"ManifestLoader\"}}{{/crossLink}}\nto maintain internal queues, but for this queue to dispatch the {{#crossLink \"fileload:event\"}}{{/crossLink}}\nevents.",
            "line": " preloadjs/LoadQueue.js:1398"
        },
        {
            "message": "Missing item type\nThe callback that is fired when a loader encounters an error from an internal file load operation. This enables\nloaders like M",
            "line": " preloadjs/LoadQueue.js:1411"
        },
        {
            "message": "Missing item type\nRemove unneeded references from a loader.",
            "line": " preloadjs/LoadQueue.js:1654"
        }
    ]
}